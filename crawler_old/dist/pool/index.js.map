{"version":3,"file":"index.js","sourceRoot":"/","sources":["pool/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { utils, Contract, BigNumber } from 'ethers';\nimport { RawEventData } from '../crawler/types';\nimport { nodeProvider, queryv2 } from '../utils/connector';\nimport logger from '../utils/logger';\nimport config from '../config';\nimport SelendraswapPair from '../assets/SelendraswapPair';\nimport SelendraswapFactory from '../assets/SelendraswapFactoryAbi';\nimport erc20Abi from '../assets/erc20Abi';\n\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\n\ninterface DefaultPairEvent {\n  poolId: string;\n  address: string;\n  eventId: string;\n  timestamp: string;\n}\n\ninterface InitialPairEvent extends DefaultPairEvent {\n  rawData: RawEventData;\n}\n\ninterface ProcessPairEvent extends DefaultPairEvent {\n  data: utils.LogDescription;\n}\n\ninterface ID {\n  id: string;\n}\n\ninterface PartialEvmEvent {\n  id: string;\n  timestamp: string;\n  rawdata: RawEventData;\n  contractaddress: string;\n}\n\ntype PariEventType = 'Swap' | 'Burn' | 'Mint' | 'Sync' | 'Transfer';\ntype PoolEventParameterDict = {[key: string]: any};\n\ninterface PoolEventData {\n  to_address?: string;\n  sender_address?: string;\n  amount_1?: string;\n  amount_2?: string;\n  amount_in_1?: string;\n  amount_in_2?: string;\n  reserved_1?: string;\n  reserved_2?: string;\n  supply?: string;\n  total_supply?: string;\n}\n\nconst processFactoryEvent = async (evmEventId: string, rawData: RawEventData): Promise<void> => {\n  const contractInterface = new utils.Interface(SelendraswapFactory);\n  const data = contractInterface.parseLog(rawData);\n\n  // We are only interested PairCreate events\n  if (data.name !== 'PairCreated') {\n    return;\n  }\n  logger.info(`Selendraswap Factory PairCreate event detected on evm even id: ${evmEventId}`);\n\n  const [tokenAddress1, tokenAddress2, poolAddress] = data.args as string[];\n\n  // TODO extend pool with additional token names and symbols or remove decimal_1 and decimal_2\n  const pool = new Contract(poolAddress, SelendraswapPair, nodeProvider.getProvider());\n  const token1 = new Contract(tokenAddress1, erc20Abi, nodeProvider.getProvider());\n  const token2 = new Contract(tokenAddress2, erc20Abi, nodeProvider.getProvider());\n\n  const poolDecimal = await pool.decimals();\n  const tokenDecimal1 = await token1.decimals();\n  const tokenDecimal2 = await token2.decimals();\n\n  await queryv2(\n    `INSERT INTO pool \n      (evm_event_id, address, token_1, token_2, pool_decimal, decimal_1, decimal_2)\n    VALUES\n      ($1, $2, $3, $4, $5, $6, $7);`,\n    [evmEventId, poolAddress, tokenAddress1, tokenAddress2, poolDecimal.toString(), tokenDecimal1.toString(), tokenDecimal2.toString()],\n  );\n};\n\ntype PoolEventKey = keyof PoolEventData;\n\nconst poolEventInsertSequence: PoolEventKey[] = ['to_address', 'sender_address', 'amount_1', 'amount_2', 'amount_in_1', 'amount_in_2', 'reserved_1', 'reserved_2', 'supply', 'total_supply'];\n\nconst defaultPairProcess = async ({ poolId, eventId, timestamp }: DefaultPairEvent, type: PariEventType, data: PoolEventParameterDict): Promise<void> => {\n  logger.info(`Processing ${type} event on evm event id: ${eventId}`);\n\n  const vals = poolEventInsertSequence.map((key) => data[key] || null);\n  const keys = poolEventInsertSequence.join(', ');\n  const indexes = poolEventInsertSequence\n    .map((_, index) => `$${index + 5}`)\n    .join(', ');\n\n  await queryv2(\n    `INSERT INTO pool_event\n      (pool_id, evm_event_id, timestamp, type, ${keys})\n    VALUES\n      ($1, $2, $3, $4, ${indexes});\n    `,\n    [poolId, eventId, timestamp, type, ...vals],\n  );\n};\n\n// From transfer function we detect the amount of liquidity added/removed from pool\n// With each Transfer event we also accumulate total supply of each pool\nconst processTransfer = async (event: ProcessPairEvent): Promise<void> => {\n  const [addr1, addr2, amount] = event.data.args;\n  if (addr1 !== ZERO_ADDRESS && addr2 !== ZERO_ADDRESS) { return; }\n  if (addr1 === ZERO_ADDRESS && addr2 === ZERO_ADDRESS) { return; }\n\n  const prevSupply = await queryv2<{total_supply: number}>(\n    `SELECT total_supply\n    FROM pool_event\n    WHERE type = 'Transfer' AND pool_id = $1\n    ORDER BY timestamp desc\n    LIMIT 1;\n    `,\n    [event.poolId],\n  );\n  const supply = prevSupply && prevSupply.length > 0 ? prevSupply[0].total_supply : 0;\n  const isMint = addr1 === ZERO_ADDRESS;\n  const prev = BigNumber.from(supply.toString());\n\n  const totalSupply = isMint ? prev.add(amount) : prev.sub(amount);\n\n  await defaultPairProcess(\n    event,\n    'Transfer',\n    {\n      supply: `${!isMint ? '-' : ''}${amount.toString()}`,\n      total_supply: totalSupply.toString(),\n    },\n  );\n};\n\nconst processSync = async (event: ProcessPairEvent): Promise<void> => defaultPairProcess(\n  event,\n  'Sync',\n  {\n    reserved_1: event.data.args[0].toString(),\n    reserved_2: event.data.args[1].toString(),\n  },\n);\n\nconst processMint = async (event: ProcessPairEvent): Promise<void> => defaultPairProcess(\n  event,\n  'Mint',\n  {\n    sender_address: event.data.args[0],\n    amount_1: event.data.args[1].toString(),\n    amount_2: event.data.args[2].toString(),\n  },\n);\n\nconst processBurn = async (event: ProcessPairEvent): Promise<void> => defaultPairProcess(\n  event,\n  'Burn',\n  {\n    sender_address: event.data.args[0],\n    amount_1: event.data.args[1].toString(),\n    amount_2: event.data.args[2].toString(),\n    to_address: event.data.args[3],\n  },\n);\n\nconst processSwap = async (event: ProcessPairEvent): Promise<void> => defaultPairProcess(\n  event,\n  'Swap',\n  {\n    sender_address: event.data.args[0],\n    amount_in_1: event.data.args[1].toString(),\n    amount_in_2: event.data.args[2].toString(),\n    amount_1: event.data.args[3].toString(),\n    amount_2: event.data.args[4].toString(),\n    to_address: event.data.args[5],\n  },\n);\n\nconst processPairEvent = async (pairEvent: InitialPairEvent): Promise<void> => {\n  logger.info('Selendraswap Pair event detected!');\n  const contractInterface = new utils.Interface(SelendraswapPair);\n  const data = contractInterface.parseLog(pairEvent.rawData);\n\n  switch (data.name) {\n    case 'Mint': await processMint({ ...pairEvent, data }); break;\n    case 'Burn': await processBurn({ ...pairEvent, data }); break;\n    case 'Swap': await processSwap({ ...pairEvent, data }); break;\n    case 'Sync': await processSync({ ...pairEvent, data }); break;\n    case 'Transfer': await processTransfer({ ...pairEvent, data }); break;\n    default: break;\n  }\n};\n\nconst findEvmEvent = async (eventId: string): Promise<PartialEvmEvent> => {\n  const evmEvents = await queryv2<PartialEvmEvent>(\n    `SELECT \n      ee.id, ee.data_raw as rawdata, ee.contract_address as contractaddress, b.timestamp \n    FROM evm_event as ee\n    JOIN block as b\n      ON ee.block_id = b.id\n    WHERE ee.id = $1;`,\n    [eventId],\n  );\n\n  if (evmEvents.length === 0) {\n    throw new Error('Evm event does not exist');\n  }\n\n  return evmEvents[0];\n};\n\nconst findPoolID = async (address: string): Promise<string|undefined> => {\n  const ids = await queryv2<ID>('SELECT id FROM pool WHERE address = $1', [address]);\n  return ids.length > 0 ? ids[0].id : undefined;\n};\n\nexport default async (eventId: string): Promise<void> => {\n  // logger.info(`Processing event: ${eventId}`);\n  const event = await findEvmEvent(eventId);\n\n  // Check if event is Selendraswap factory create pool event. If so add new pool in DB\n  if (event.contractaddress.toLowerCase() === config.selendraswapFactoryAddress.toLowerCase()) {\n    await processFactoryEvent(eventId, event.rawdata);\n    return;\n  }\n\n  // Check if current event address is in pools table\n  // If so process pool event accordingly\n  const poolId = await findPoolID(event.contractaddress);\n  if (poolId) {\n    await processPairEvent({\n      eventId,\n      poolId,\n      rawData: event.rawdata,\n      timestamp: event.timestamp,\n      address: event.contractaddress,\n    });\n  }\n};\n"]}