{"version":3,"file":"extrinsic.js","sourceRoot":"/","sources":["crawler/extrinsic.ts"],"names":[],"mappings":";;;AACA,kDAAkD;AAK3C,MAAM,aAAa,GAAG,CAAC,SAAoB,EAAU,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,SAAS,CAAC;AAA5F,QAAA,aAAa,iBAA+E;AAEzG,MAAM,mBAAmB,GAAG,CAAC,KAA6B,EAAU,EAAE;IACpE,IAAI,KAAK,CAAC,QAAQ,EAAE;QAClB,MAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC;QACnC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QAChF,OAAO,GAAG,OAAO,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;KACtC;IACD,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC1B,CAAC,CAAC;AAEK,MAAM,eAAe,GAAG,CAAC,eAAwB,EAAmB,EAAE,CAAC,eAAe,CAAC,MAAM,CAClG,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;IAClB,IACE,IAAI,CAAC,IAAI,KAAK,SAAS;WAClB,wBAAY,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,CAAC,KAAK,CAAC,EAC5E;QACA,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;KAC5B;IAAC,IAAI,wBAAY,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;QAC5E,MAAM,CAAC,eAAe,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC;QACrC,OAAO;YACL,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,mBAAmB,CAAC,eAAe,CAAC;SAC9C,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,EACC,EAAE,IAAI,EAAE,SAAS,EAAqB,CACzC,CAAC;AAjBW,QAAA,eAAe,mBAiB1B","sourcesContent":["import { SpRuntimeDispatchError } from '@polkadot/types/lookup';\nimport { nodeProvider } from '../utils/connector';\nimport {\n  Event, Extrinsic, ExtrinsicStatus,\n} from './types';\n\nexport const resolveSigner = (extrinsic: Extrinsic): string => extrinsic.signer?.toString() || 'deleted';\n\nconst extractErrorMessage = (error: SpRuntimeDispatchError): string => {\n  if (error.isModule) {\n    const errorModule = error.asModule;\n    const { docs, name, section } = errorModule.registry.findMetaError(errorModule);\n    return `${section}.${name}: ${docs}`;\n  }\n  return error.toString();\n};\n\nexport const extrinsicStatus = (extrinsicEvents: Event[]): ExtrinsicStatus => extrinsicEvents.reduce(\n  (prev, { event }) => {\n    if (\n      prev.type === 'unknown'\n        && nodeProvider.getProvider().api.events.system.ExtrinsicSuccess.is(event)\n    ) {\n      return { type: 'success' };\n    } if (nodeProvider.getProvider().api.events.system.ExtrinsicFailed.is(event)) {\n      const [dispatchedError] = event.data;\n      return {\n        type: 'error',\n        message: extractErrorMessage(dispatchedError),\n      };\n    }\n    return prev;\n  },\n    { type: 'unknown' } as ExtrinsicStatus,\n);\n"]}