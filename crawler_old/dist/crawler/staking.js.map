{"version":3,"file":"staking.js","sourceRoot":"/","sources":["crawler/staking.ts"],"names":[],"mappings":";;;;;;AAGA,kDAA4D;AAC5D,6DAAqC;AAErC,MAAM,eAAe,GAAG,CAAC,OAAgB,EAAiB,EAAE,CAAC;IAC3D,OAAO,CAAC,OAAO;IACf,OAAO,CAAC,MAAM;IACd,OAAO,CAAC,MAAM;IACd,OAAO,CAAC,IAAI;IACZ,OAAO,CAAC,SAAS;CAClB,CAAC;AAEK,MAAM,gBAAgB,GAAG,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAW,EAAe,EAAE,CAAC,CAAC;IACzF,OAAO;IACP,SAAS;IACT,MAAM,EAAE,IAAI;IACZ,OAAO,EAAE,MAAM;CAChB,CAAC,CAAC;AALU,QAAA,gBAAgB,oBAK1B;AAEI,MAAM,mBAAmB,GAAG,KAAK,EAAoC,EAC1E,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,GAC1B,EAAoB,EAAE;IACxB,IAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACrB,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IAEvB,sEAAsE;IACtE,MAAM,SAAS,GAAG,MAAM,wBAAY,CAAC,KAAK,CACxC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAC3D,CAAC;IACF,oEAAoE;IACpE,MAAM,iBAAiB,GAAG,MAAM,wBAAY,CAAC,KAAK,CAChD,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,CACrE,CAAC;IAEF,iGAAiG;IACjG,IAAI,iBAAiB,CAAC,SAAS,EAAE;QAC/B,gBAAM,CAAC,IAAI,CAAC,qCAAqC,MAAM,QAAQ,iBAAiB,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QACzG,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;KACjD;IAED,OAAO;QACL,MAAM;QACN,MAAM;QACN,OAAO;QACP,SAAS;QACT,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,QAAQ;KACf,CAAC;AACJ,CAAC,CAAC;AA7BW,QAAA,mBAAmB,uBA6B9B;AAEK,MAAM,aAAa,GAAG,KAAK,EAAE,cAAyB,EAAiB,EAAE,CAAC,IAAA,oBAAQ,EACvF;;;QAGM,EACN,cAAc,CAAC,GAAG,CAAC,eAAe,CAAC,CACpC,CAAC;AANW,QAAA,aAAa,iBAMxB","sourcesContent":["import {\n  AccountHead, NeededStakingValues, Staking, StakingInsert,\n} from './types';\nimport { insertV2, nodeProvider } from '../utils/connector';\nimport logger from '../utils/logger';\n\nconst stakingToInsert = (staking: Staking): StakingInsert => [\n  staking.eventId,\n  staking.signer,\n  staking.amount,\n  staking.type,\n  staking.timestamp,\n];\n\nexport const stakingToAccount = ({ signer, blockId, timestamp }: Staking): AccountHead => ({\n  blockId,\n  timestamp,\n  active: true,\n  address: signer,\n});\n\nexport const processStakingEvent = async <T extends NeededStakingValues, > ({\n  id, data, timestamp, blockId,\n}: T): Promise<Staking> => {\n  let signer = data[0];\n  const amount = data[1];\n\n  // Retrieving block hash to extract correct reward destination mapping\n  const blockHash = await nodeProvider.query(\n    (provider) => provider.api.rpc.chain.getBlockHash(blockId),\n  );\n  // Retrieving reward destination mapping for specific block and user\n  const rewardDestination = await nodeProvider.query(\n    (provider) => provider.api.query.staking.payee.at(blockHash, signer),\n  );\n\n  // If account has speficied different reward destination we switch the staking signer to that one\n  if (rewardDestination.isAccount) {\n    logger.info(`Redirecting staking rewards from: ${signer} to: ${rewardDestination.asAccount.toString()}`);\n    signer = rewardDestination.asAccount.toString();\n  }\n\n  return {\n    amount,\n    signer,\n    blockId,\n    timestamp,\n    eventId: id,\n    type: 'Reward',\n  };\n};\n\nexport const insertStaking = async (stakingRewards: Staking[]): Promise<void> => insertV2(\n  `INSERT INTO staking\n    (event_id, signer, amount, type, timestamp)\n  VALUES\n    %L;`,\n  stakingRewards.map(stakingToInsert),\n);\n"]}