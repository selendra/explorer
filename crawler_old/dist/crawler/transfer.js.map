{"version":3,"file":"transfer.js","sourceRoot":"/","sources":["crawler/transfer.ts"],"names":[],"mappings":"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","sourcesContent":["import { BigNumber } from 'ethers';\nimport { nodeProvider } from '../utils/connector';\nimport { SELENDRA_CONTRACT_ADDRESS, resolvePromisesAsChunks } from '../utils/utils';\nimport {\n  isErc20TransferEvent, isErc721TransferEvent, isErc1155TransferSingleEvent, isErc1155TransferBatchEvent,\n} from './evmEvent';\nimport {\n  AccountHead, EventBody, EvmLogWithDecodedEvent, Transfer,\n} from './types';\nimport { findNativeAddress } from './utils';\n\nconst evmLogToTransfer = async ({\n  timestamp, address, blockId, extrinsicId, signedData,\n}: EvmLogWithDecodedEvent, fromEvmAddress: string, toEvmAddress: string): Promise<Transfer> => {\n  const [toAddress, fromAddress] = await Promise.all([\n    findNativeAddress(toEvmAddress),\n    findNativeAddress(fromEvmAddress),\n  ]);\n\n  return {\n    blockId,\n    timestamp,\n    extrinsicId,\n    toEvmAddress,\n    success: true,\n    fromEvmAddress,\n    errorMessage: '',\n    tokenAddress: address,\n    toAddress: toAddress === '' ? 'null' : toAddress,\n    fromAddress: fromAddress === '' ? 'null' : fromAddress,\n    feeAmount: BigNumber.from(signedData.fee.partialFee).toString(),\n    amount: '0',\n    type: 'ERC20',\n  };\n};\n\nconst erc20EvmLogToTransfer = async (log: EvmLogWithDecodedEvent): Promise<Transfer[]> => {\n  const [from, to, amount] = log.decodedEvent.args;\n  const base = await evmLogToTransfer(log, from, to);\n\n  return [{\n    ...base,\n    type: 'ERC20',\n    amount: amount.toString(),\n    denom: log.contractData?.symbol,\n  }];\n};\n\nconst erc721EvmLogToTransfer = async (log: EvmLogWithDecodedEvent): Promise<Transfer[]> => {\n  const [from, to, nftId] = log.decodedEvent.args;\n  const base = await evmLogToTransfer(log, from, to);\n\n  return [{\n    ...base,\n    type: 'ERC721',\n    nftId: nftId.toString(),\n  }];\n};\n\nconst erc1155SingleEvmLogToTransfer = async (log: EvmLogWithDecodedEvent): Promise<Transfer[]> => {\n  const [, from, to, nftId, amount] = log.decodedEvent.args;\n  const base = await evmLogToTransfer(log, from, to);\n\n  return [{\n    ...base,\n    type: 'ERC1155',\n    nftId: nftId.toString(),\n    amount: amount.toString(),\n  }];\n};\n\nconst erc1155BatchEvmLogToTransfer = async (log: EvmLogWithDecodedEvent): Promise<Transfer[]> => {\n  const [, from, to, nftIds, amounts] = log.decodedEvent.args;\n  const base = await evmLogToTransfer(log, from, to);\n\n  return (nftIds as []).map((_, index) => ({\n    ...base,\n    type: 'ERC1155',\n    nftId: nftIds[index].toString(),\n    amount: amounts[index].toString(),\n  }));\n};\n\nexport const processTokenTransfers = async (evmLogs: EvmLogWithDecodedEvent[]): Promise<Transfer[]> => {\n  const transfers = evmLogs\n    .map(async (log): Promise<Transfer[]> => {\n      if (isErc20TransferEvent(log)) {\n        return erc20EvmLogToTransfer(log);\n      } if (isErc721TransferEvent(log)) {\n        return erc721EvmLogToTransfer(log);\n      } if (isErc1155TransferSingleEvent(log)) {\n        return erc1155SingleEvmLogToTransfer(log);\n      } if (isErc1155TransferBatchEvent(log)) {\n        return erc1155BatchEvmLogToTransfer(log);\n      }\n      return Promise.resolve([]);\n    });\n  const result = await resolvePromisesAsChunks(transfers);\n  return result.flat();\n};\n\n// Assigning that the account is active is a temporary solution!\n// The correct way would be to first query db if account exists\n// If it does not and if transfer has failed then the account is not active.\n// The query can be skipped if we would have complete\n// list available in function (dynamic programming)\nexport const extractTransferAccounts = ({\n  fromAddress,\n  toAddress,\n  blockId,\n  timestamp,\n}: Transfer): AccountHead[] => [\n  {\n    blockId, address: fromAddress, active: true, timestamp,\n  },\n  {\n    blockId, address: toAddress, active: true, timestamp,\n  },\n];\n\nexport const isTransferEvent = ({ event: { event } }: EventBody) => nodeProvider.getProvider().api.events.balances.Transfer.is(event);\n\nexport const processTransferEvent = async ({\n  event: { event: { data } }, status, signedData, extrinsicId, blockId, timestamp,\n}: EventBody): Promise<Transfer> => {\n  const [fromAddress, toAddress, amount] = data;\n  const [toEvmAddress, fromEvmAddress] = await Promise.all([\n    nodeProvider.query((provider) => provider.api.query.evmAccounts.evmAddresses(toAddress)),\n    nodeProvider.query((provider) => provider.api.query.evmAccounts.evmAddresses(fromAddress)),\n  ]);\n  const feeAmount = BigNumber.from(signedData!.fee.partialFee).toString();\n  return {\n    amount: amount.toString(),\n    blockId,\n    feeAmount,\n    timestamp,\n    extrinsicId,\n    tokenAddress: SELENDRA_CONTRACT_ADDRESS,\n    toAddress: toAddress.toString(),\n    fromAddress: fromAddress.toString(),\n    toEvmAddress: toEvmAddress.toString(),\n    fromEvmAddress: fromEvmAddress.toString(),\n    denom: 'SEL',\n    type: 'Native',\n    success: status.type === 'success',\n    errorMessage: status.type === 'error' ? status.message : '',\n  };\n};\n"]}