{"version":3,"file":"contracts.js","sourceRoot":"/","sources":["crawler/contracts.ts"],"names":[],"mappings":";;AAGA,kDAA4D;AAC5D,0CAAmD;AAInD,MAAM,QAAQ,GAAG,KAAK,EAAE,SAAoB,EAAkB,EAAE;IAC9D,MAAM,QAAQ,GAAG,MAAM,wBAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IAC3G,OAAO,QAAQ;SACZ,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;SAC7E,MAAM,CACL,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC,GAAI,CAAC,EAAE,IAAK,EAAE,CAAC,EACjD,EAAE,CACH,CAAC;AACN,CAAC,CAAC;AAEF,kBAAe,KAAK,EAAE,WAAmB,EAAiB,EAAE;IAC1D,MAAM,SAAS,GAAG,MAAM,wBAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;IAC3G,MAAM,YAAY,GAAoC,MAAM,wBAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IACnJ,MAAM,KAAK,GAAU,MAAM,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAqB,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;QACnE,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,EAAS,CAAC;QACvC,OAAO;YACL,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,IAAI,SAAS;YAC/C,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,IAAI,SAAS;YACvD,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU,IAAI,SAAS;SAC5D,CAAC;IACJ,CAAC,CAAC;SACC,MAAM,CAAC,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,OAAO,IAAI,QAAQ,IAAI,UAAU,CAAC;SAChF,GAAG,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAkB,EAAE;QAC/D,MAAM,MAAM,GAAG,MAAM,wBAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;QAC3G,OAAO;YACL,IAAA,yBAAiB,EAAC,OAAQ,CAAC;YAC3B,CAAC,CAAC;YACF,MAAM,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,IAAI,IAAI;YACpC,KAAK,CAAC,QAAQ,CAAC;YACf,EAAE;YACF,EAAE;YACF,GAAG;YACH,GAAG;YACH,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE;SAC3B,CAAC;IACJ,CAAC,CAAC,CAAC;IACL,MAAM,IAAA,oBAAQ,EAAC;;;;;;KAMZ,EAAE,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC","sourcesContent":["import type { StorageKey } from '@polkadot/types';\nimport type { AnyTuple, Codec } from '@polkadot/types/types';\nimport type { BlockHash } from '@polkadot/types/interfaces/chain';\nimport { nodeProvider, insertV2 } from '../utils/connector';\nimport { toChecksumAddress } from '../utils/utils';\n\ntype Codes = {[codeHash: string]: string};\n\nconst getCodes = async (blockHash: BlockHash): Promise<Codes> => {\n  const codeData = await nodeProvider.query((provider) => provider.api.query.evm.codes.entriesAt(blockHash));\n  return codeData\n    .map(([key, data]) => [key.toHuman()?.toString(), data.toHuman()?.toString()])\n    .reduce(\n      (acc, [key, data]) => ({ ...acc, [key!]: data! }),\n      {},\n    );\n};\n\nexport default async (blockNumber: number): Promise<void> => {\n  const blockHash = await nodeProvider.query((provider) => provider.api.rpc.chain.getBlockHash(blockNumber));\n  const contractData: [StorageKey<AnyTuple>, Codec][] = await nodeProvider.query((provider) => provider.api.query.evm.accounts.entriesAt(blockHash));\n  const codes: Codes = await getCodes(blockHash);\n  const contracts: Promise<any[]>[] = contractData.map(([key, data]) => {\n    const contract = data.toHuman() as any;\n    return {\n      address: key.toHuman()?.toString() || undefined,\n      codeHash: contract?.contractInfo?.codeHash || undefined,\n      maintainer: contract?.contractInfo?.maintainer || undefined,\n    };\n  })\n    .filter(({ address, codeHash, maintainer }) => address && codeHash && maintainer)\n    .map(async ({ address, codeHash, maintainer }): Promise<any[]> => {\n      const signer = await nodeProvider.query((provider) => provider.api.query.evmAccounts.accounts(maintainer));\n      return [\n        toChecksumAddress(address!),\n        -1,\n        signer.toHuman()?.toString() || '0x',\n        codes[codeHash],\n        '',\n        '',\n        '0',\n        '0',\n        (new Date()).toUTCString(),\n      ];\n    });\n  await insertV2(`\n    INSERT INTO contract\n        (address, extrinsic_id, signer, bytecode, bytecode_context, bytecode_arguments, gas_limit, storage_limit, timestamp)\n    VALUES\n        %L\n    ON CONFLICT (address) DO NOTHING;\n    `, await Promise.all(contracts));\n};\n"]}