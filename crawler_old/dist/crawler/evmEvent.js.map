{"version":3,"file":"evmEvent.js","sourceRoot":"/","sources":["crawler/evmEvent.ts"],"names":[],"mappings":"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","sourcesContent":["import { utils } from 'ethers';\nimport { nodeProvider } from '../utils/connector';\nimport {\n  ExtrinsicBody,\n  Event,\n  Contract,\n  AccountHead,\n  EvmLog,\n  EvmLogWithDecodedEvent,\n  BytecodeLog,\n  BytecodeLogWithBlockId,\n} from './types';\nimport { getContractDB } from '../queries/evmEvent';\nimport {\n  removeUndefinedItem, resolvePromisesAsChunks, toChecksumAddress,\n} from '../utils/utils';\n\nconst preprocessBytecode = (bytecode: string) => {\n  const start = bytecode.indexOf('6080604052');\n  const end = bytecode.indexOf('a265627a7a72315820') !== -1\n    ? bytecode.indexOf('a265627a7a72315820')\n    : bytecode.indexOf('a264697066735822');\n  return {\n    context: bytecode.slice(start, end),\n    args: bytecode.slice(end),\n  };\n};\n\nconst findContractEvent = (events: Event[]): Event | undefined => events.find(\n  ({ event }) => event.section === 'evm' && event.method === 'Created',\n);\n\nexport const isExtrinsicEVMCreate = ({\n  extrinsic: { method },\n  events,\n}: ExtrinsicBody): boolean => method.section === 'evm'\n  && method.method === 'create'\n  && !!findContractEvent(events);\n\nexport const isExtrinsicEvmClaimAccount = ({\n  extrinsic: {\n    method: { section, method },\n  },\n}: ExtrinsicBody): boolean => section === 'evmAccounts' && method === 'claimDefaultAccount';\n\nexport const isExtrinsicEVMCall = ({\n  extrinsic: { method },\n}: ExtrinsicBody): boolean => method.section === 'evm' && method.method === 'call';\n\nexport const isEventEvmLog = <T extends {event: Event}>({ event: { event: { method, section } } }: T): boolean => method === 'Log' && section === 'evm';\n\nexport const extrinsicToEvmClaimAccount = ({\n  events,\n  blockId,\n  timestamp,\n}: ExtrinsicBody): AccountHead[] => {\n  const [address] = events[0].event.data;\n  return [{\n    blockId, address: address.toString(), active: true, timestamp,\n  }];\n};\n\nexport const extrinsicToContract = ({\n  extrinsic,\n  events,\n  id,\n  timestamp,\n}: ExtrinsicBody): Contract => {\n  const { args } = extrinsic;\n  const contractEvent = findContractEvent(events)!;\n  const address = toChecksumAddress(contractEvent.event.data[0].toString());\n  const reserveEvent = events.find((evn) => nodeProvider.getProvider().api.events.balances.Reserved.is(evn.event))!;\n  const signer = reserveEvent.event.data[0].toString();\n  const bytecode = args[0].toString();\n  const gasLimit = args[2].toString();\n  const storageLimit = args[3].toString();\n\n  const { context: bytecodeContext, args: bytecodeArguments } = preprocessBytecode(bytecode);\n  return {\n    signer,\n    address,\n    bytecode,\n    gasLimit,\n    timestamp,\n    storageLimit,\n    bytecodeContext,\n    extrinsicId: id,\n    bytecodeArguments,\n  };\n};\n\nexport const eventToEvmLog = ({ event }: Event): BytecodeLog => {\n  const bl = (event.data.toJSON() as any)[0];\n  bl.address = toChecksumAddress(bl.address);\n  return bl;\n};\n\nconst extractEvmLog = async (\n  event: BytecodeLogWithBlockId,\n): Promise<EvmLog | undefined> => {\n  const result = await getContractDB(event.address);\n  if (result.length === 0) {\n    return undefined;\n  }\n  const verifiedContract = result[0];\n  return {\n    ...event,\n    name: verifiedContract?.name,\n    abis: verifiedContract?.compiled_data,\n    type: verifiedContract?.type,\n    contractData: verifiedContract?.contract_data,\n  };\n};\n\nconst decodeEvmLog = (event: EvmLog): EvmLogWithDecodedEvent => {\n  const {\n    abis, data, name, topics,\n  } = event;\n  const abi = new utils.Interface(abis[name]);\n  const result = abi.parseLog({ topics, data });\n  return { ...event, decodedEvent: result };\n};\n\nconst extrToEvmLog = ({\n  events, blockId, timestamp, id, signedData,\n}: ExtrinsicBody) => events\n  .map((event) => ({\n    event, blockId, timestamp, extrinsicId: id, signedData,\n  }));\n\nexport const extrinsicToEvmLogs = async (\n  extrinsicEvmCalls: ExtrinsicBody[],\n): Promise<EvmLogWithDecodedEvent[]> => {\n  const baseEvmLogs = extrinsicEvmCalls\n    .flatMap(extrToEvmLog)\n    .filter(isEventEvmLog)\n    .map(({\n      event, blockId, timestamp, extrinsicId, signedData,\n    }): BytecodeLogWithBlockId => {\n      const a = (event.event.data.toJSON() as any)[0];\n      a.address = toChecksumAddress(a.address);\n      return {\n        ...a, timestamp, blockId, extrinsicId, signedData,\n      };\n    })\n  // only returns verified contract logs\n    .map(extractEvmLog);\n\n  const decodedEvmData = await resolvePromisesAsChunks(baseEvmLogs);\n\n  return decodedEvmData\n    .filter(removeUndefinedItem)\n    .map(decodeEvmLog);\n};\n\nexport const isErc20TransferEvent = ({ decodedEvent, type }: EvmLogWithDecodedEvent): boolean => decodedEvent.name === 'Transfer' && type === 'ERC20';\n\nexport const isErc721TransferEvent = ({ decodedEvent, type }: EvmLogWithDecodedEvent): boolean => decodedEvent.name === 'Transfer' && type === 'ERC721';\n\nexport const isErc1155TransferSingleEvent = ({ decodedEvent, type }: EvmLogWithDecodedEvent): boolean => decodedEvent.name === 'TransferSingle' && type === 'ERC1155';\n\nexport const isErc1155TransferBatchEvent = ({ decodedEvent, type }: EvmLogWithDecodedEvent): boolean => decodedEvent.name === 'TransferBatch' && type === 'ERC1155';\n"]}