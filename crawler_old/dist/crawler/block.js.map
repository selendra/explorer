{"version":3,"file":"block.js","sourceRoot":"/","sources":["crawler/block.ts"],"names":[],"mappings":";;;;;;AAAA,kDAAkD;AAClD,4CAA+E;AAC/E,2CAGqB;AAYrB,oDAK8B;AAC9B,4CAAgE;AAChE,mCAMiB;AACjB,0CAAgF;AAChF,yCAMoB;AACpB,kDAAuE;AACvE,6DAAqC;AACrC,uCAAiF;AACjF,yEAAwD;AACxD,yCAEoB;AACpB,+CAGuB;AAEvB,MAAM,SAAS,GAAG,KAAK,EAAE,EAAU,EAAsB,EAAE;IACzD,MAAM,IAAI,GAAG,MAAM,wBAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7F,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;AACtB,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE,IAAI,EAAa,EAAkB,EAAE;IAClE,MAAM,QAAQ,GAAG,wBAAY,CAAC,WAAW,EAAE,CAAC;IAC5C,MAAM,CAAC,WAAW,EAAE,cAAc,EAAE,MAAM,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAC9D,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;QACrC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;QACzC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC;KAC1C,CAAC,CAAC;IAEH,yDAAyD;IACzD,MAAM,cAAc,GAAG,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAEvD,IAAI,SAAS,CAAC;IACd,IACE,cAAc;WACX,cAAc,CAAC,MAAM,CAAC,OAAO,KAAK,WAAW;WAC7C,cAAc,CAAC,MAAM,CAAC,MAAM,KAAK,KAAK,EACzC;QACA,SAAS,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;KACxE;SAAM;QACL,SAAS,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QAC5D,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;KACxD;IAED,OAAO;QACL,EAAE;QACF,IAAI;QACJ,WAAW;QACX,cAAc;QACd,MAAM;QACN,SAAS;KACV,CAAC;AACJ,CAAC,CAAC;AAEF,gCAAgC;AAChC,MAAM,iBAAiB,GAAG,CAAC,EACzB,EAAE,EACF,IAAI,EACJ,cAAc,EACd,WAAW,EACX,SAAS,GACH,EAAE,EAAE,CAAC,CAAC;IACZ,EAAE;IACF,SAAS;IACT,SAAS,EAAE,KAAK;IAChB,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE;IACrB,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAChD,UAAU,EAAE,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE;IAC1D,SAAS,EAAE,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;IACxD,aAAa,EAAE,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE;CAClE,CAAC,CAAC;AAEH,MAAM,uBAAuB,GAAG,CAAC,EAC/B,EAAE,EACF,WAAW,EACX,MAAM,EACN,SAAS,GACH,EAAmB,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;IACpF,KAAK;IACL,SAAS;IACT,SAAS;IACT,OAAO,EAAE,EAAE;IACX,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,IAAA,wBAAgB,EAAC,KAAK,CAAC,CAAC;IAC9C,MAAM,EAAE,IAAA,2BAAe,EAAC,MAAM,CAAC;CAChC,CAAC,CAAC,CAAC;AAEJ,MAAM,sBAAsB,GAAG,KAAK,EAClC,aAAqB,EACS,EAAE;IAChC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAC1C,wBAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QACnF,wBAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;KAC1F,CAAC,CAAC;IAEH,OAAO;QACL,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE;QACjB,UAAU,EAAE,UAAU,CAAC,MAAM,EAAE;KAChC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,UAAkB,EAAE,EAAE,CAAC,KAAK,EACjD,aAA4B,EAC5B,KAAa,EACW,EAAE,CAAC,CAAC;IAC5B,GAAG,aAAa;IAChB,EAAE,EAAE,UAAU,GAAG,KAAK;IACtB,UAAU,EAAE,aAAa,CAAC,SAAS,CAAC,QAAQ;QAC1C,CAAC,CAAC,MAAM,sBAAsB,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAC/D,CAAC,CAAC,SAAS;CACd,CAAC,CAAC;AAEH,MAAM,iBAAiB,GAAG,CAAC,EACzB,EAAE,EACF,SAAS,EACT,UAAU,EACV,OAAO,EACP,MAAM,EACN,SAAS,EACT,KAAK,GACS,EAAuB,EAAE;IACvC,MAAM,MAAM,GAAG,IAAA,2BAAe,EAAC,MAAM,CAAC,CAAC;IACvC,MAAM,EACJ,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,GACzB,GAAG,SAAS,CAAC;IACd,OAAO;QACL,EAAE;QACF,KAAK;QACL,OAAO;QACP,UAAU;QACV,SAAS;QACT,MAAM,EAAE,MAAM,CAAC,IAAI;QACnB,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE;QACrB,MAAM,EAAE,MAAM,CAAC,MAAM;QACrB,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,MAAM,EAAE,IAAA,yBAAa,EAAC,SAAS,CAAC;QAChC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;QAC1B,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;QAChC,YAAY,EAAE,MAAM,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;KAC5D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,UAAkB,EAAE,EAAE,CAAC,CAAC,KAAgB,EAAE,KAAa,EAAa,EAAE,CAAC,CAAC;IAC3F,EAAE,EAAE,UAAU,GAAG,KAAK;IACtB,GAAG,KAAK;CACT,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,CAAC,EAAE,EAAE,EAAE,IAAI,EAAa,EAAE,EAAE,CAAC,CAAC;IACzD,EAAE;IACF,SAAS,EAAE,KAAK;IAChB,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE;IACrB,SAAS,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAAE;IACxC,MAAM,EAAE,EAAE;IACV,UAAU,EAAE,EAAE;IACd,SAAS,EAAE,EAAE;IACb,aAAa,EAAE,EAAE;CAClB,CAAC,CAAC;AAEI,MAAM,oBAAoB,GAAG,KAAK,EACvC,MAAc,EACd,IAAY,EACK,EAAE;IACnB,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,EAAE;QACtB,OAAO,CAAC,CAAC;KACV;IAED,gBAAM,CAAC,IAAI,CAAC,uCAAuC,MAAM,OAAO,IAAI,EAAE,CAAC,CAAC;IAExE,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACrC,wBAAY,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IAEpC,gBAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;IAClD,YAAY,IAAI,QAAQ,CAAC,MAAM,CAAC;IAChC,MAAM,MAAM,GAAG,MAAM,IAAA,+BAAuB,EAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAEtE,gBAAgB;IAChB,gBAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;IACjD,MAAM,IAAA,4BAAoB,EAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAC7D,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AAtBW,QAAA,oBAAoB,wBAsB/B;AAEF,kBAAe,KAAK,EAAE,MAAc,EAAE,IAAY,EAAE,IAAI,GAAG,IAAI,EAAmB,EAAE;IAClF,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACrC,wBAAY,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IAEpC,gBAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACvC,YAAY,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IAEpC,MAAM,QAAQ,GAAG,wBAAY,CAAC,WAAW,EAAE,CAAC;IAC5C,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CACnC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAC9D,CAAC;IACF,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACtC,EAAE;QACF,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;KACrB,CAAC,CAAC,CAAC;IAEJ,gBAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACvC,IAAI,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAEtD,gBAAgB;IAChB,IAAI,IAAI,EAAE;QACR,gBAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAC9C,MAAM,IAAA,4BAAoB,EAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;KAC3D;IAED,aAAa;IACb,gBAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;IAC5D,IAAI,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,CAAC;IAElE,gBAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;IAC5D,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,MAAM,IAAA,uBAAW,GAAE,CAAC;IACxC,gBAAM,CAAC,IAAI,CAAC,sBAAsB,GAAG,oBAAoB,IAAI,EAAE,CAAC,CAAC;IAEjE,gBAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;IACpD,YAAY,IAAI,gBAAgB,CAAC,MAAM,CAAC;IACxC,MAAM,UAAU,GAAG,MAAM,IAAA,+BAAuB,EAC9C,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAC1C,CAAC;IAEF,cAAc;IACd,MAAM,GAAG,EAAE,CAAC;IACZ,gBAAgB,GAAG,EAAE,CAAC;IAEtB,SAAS;IACT,gBAAM,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;IAC3D,MAAM,MAAM,GAAG,UAAU;SACtB,OAAO,CAAC,8BAAsB,CAAC;SAC/B,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IAEzB,IAAI,IAAI,EAAE;QACR,gBAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACpC,MAAM,IAAA,4BAAgB,EAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAC1D,gBAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAChC,MAAM,IAAA,oBAAY,EAAC,MAAM,CAAC,CAAC;KAC5B;IAED,UAAU;IACV,gBAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACxC,MAAM,OAAO,GAAG,MAAM,IAAA,+BAAuB,EAC3C,MAAM;SACH,MAAM,CAAC,4BAAoB,CAAC;SAC5B,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAA,6BAAmB,EAAC;QAC9B,GAAG,CAAC;QACJ,IAAI,EAAE;YACJ,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;YAChC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;SACjC;KACF,CAAC,CAAC,CACN,CAAC;IAEF,YAAY;IACZ,gBAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;IAC3C,IAAI,SAAS,GAAG,MAAM,IAAA,+BAAuB,EAC3C,MAAM,CAAC,MAAM,CAAC,0BAAe,CAAC,CAAC,GAAG,CAAC,+BAAoB,CAAC,CACzD,CAAC;IAEF,WAAW;IACX,gBAAM,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;IAC7D,MAAM,OAAO,GAAG,MAAM,IAAA,6BAAkB,EAAC,UAAU,CAAC,CAAC;IACrD,YAAY,IAAI,OAAO,CAAC,MAAM,CAAC;IAE/B,kBAAkB;IAClB,gBAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IACzC,IAAI,cAAc,GAAG,MAAM,IAAA,gCAAqB,EAAC,OAAO,CAAC,CAAC;IAC1D,YAAY,IAAI,cAAc,CAAC,MAAM,CAAC;IACtC,SAAS,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;IAClC,cAAc,GAAG,EAAE,CAAC;IAEpB,oBAAoB;IACpB,gBAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAC5C,MAAM,YAAY,GAAG,MAAM,IAAA,oCAAsB,EAAC,OAAO,CAAC,CAAC;IAC3D,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC;IAEpC,WAAW;IACX,gBAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;IACvE,MAAM,WAAW,GAAkB,EAAE,CAAC;IACtC,WAAW,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,kCAAuB,CAAC,CAAC,CAAC;IAChE,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,0BAAkB,CAAC,CAAC,CAAC;IACxD,WAAW,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,0BAAgB,CAAC,CAAC,CAAC;IACnD,WAAW,CAAC,IAAI,CACd,GAAG,UAAU;SACV,MAAM,CAAC,qCAA0B,CAAC;SAClC,OAAO,CAAC,qCAA0B,CAAC,CACvC,CAAC;IAEF,gBAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;IACvE,IAAI,qBAAqB,GAAG,IAAA,sBAAc,EAAC,WAAW,EAAE,SAAS,CAAC,CAAC,MAAM,CACvE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,CACvC,CAAC;IAEF,gBAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAC5C,YAAY,IAAI,qBAAqB,CAAC,MAAM,CAAC;IAC7C,IAAI,QAAQ,GAAG,MAAM,IAAA,+BAAuB,EAC1C,qBAAqB,CAAC,GAAG,CAAC,yBAAiB,CAAC,CAC7C,CAAC;IACF,qBAAqB,GAAG,EAAE,CAAC;IAE3B,uBAAuB;IACvB,gBAAM,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;IAC7D,YAAY,CAAC,IAAI,CAAC,GAAG,IAAA,uCAAyB,EAAC,QAAQ,CAAC,CAAC,CAAC;IAE1D,IAAI,IAAI,EAAE;QACR,gBAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAC9C,MAAM,IAAA,sBAAc,EAAC,QAAQ,CAAC,CAAC;QAC/B,cAAc;QACd,QAAQ,GAAG,EAAE,CAAC;QAEd,iBAAiB;QACjB,gBAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACzC,MAAM,IAAA,uBAAa,EAAC,OAAO,CAAC,CAAC;QAE7B,YAAY;QACZ,gBAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACnC,MAAM,IAAA,2BAAe,EAAC,SAAS,CAAC,CAAC;QAEjC,SAAS,GAAG,EAAE,CAAC;QAEf,YAAY;QACZ,gBAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QACxC,IAAI,SAAS,GAAG,UAAU;aACvB,MAAM,CAAC,+BAAoB,CAAC;aAC5B,GAAG,CAAC,8BAAmB,CAAC,CAAC;QAC5B,gBAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACnC,MAAM,IAAA,0BAAe,EAAC,SAAS,CAAC,CAAC;QACjC,SAAS,GAAG,EAAE,CAAC;QAEf,gBAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACpC,MAAM,IAAA,0BAAe,EAAC,MAAM,CAAC,CAAC;QAE9B,gBAAgB;QAChB,MAAM,IAAA,qBAAkB,EAAC,YAAY,CAAC,CAAC;QAEvC,gBAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACjC,MAAM,IAAA,6BAAqB,EAAC,MAAM,EAAE,IAAI,CAAC,CAAC;KAC3C;IAED,gBAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzB,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC","sourcesContent":["import { nodeProvider } from '../utils/connector';\nimport { insertMultipleBlocks, updateBlocksFinalized } from '../queries/block';\nimport {\n  extrinsicStatus,\n  resolveSigner,\n} from './extrinsic';\nimport {\n  AccountHead,\n  Block,\n  BlockHash,\n  Event,\n  EventBody,\n  EventHead,\n  ExtrinsicBody,\n  ExtrinsicHead,\n  SignedExtrinsicData,\n} from './types';\nimport {\n  InsertExtrinsicBody,\n  insertExtrinsics,\n  insertTransfers,\n  nextFreeIds,\n} from '../queries/extrinsic';\nimport { insertAccounts, insertEvents } from '../queries/event';\nimport {\n  accountHeadToBody,\n  accountNewOrKilled,\n  extrinsicToEventHeader,\n  isEventStakingReward,\n  isExtrinsicEvent,\n} from './event';\nimport { range, dropDuplicates, resolvePromisesAsChunks } from '../utils/utils';\nimport {\n  extrinsicToContract,\n  extrinsicToEvmClaimAccount,\n  isExtrinsicEvmClaimAccount,\n  isExtrinsicEVMCreate,\n  extrinsicToEvmLogs,\n} from './evmEvent';\nimport { insertContracts, insertEvmEvents } from '../queries/evmEvent';\nimport logger from '../utils/logger';\nimport { insertStaking, processStakingEvent, stakingToAccount } from './staking';\nimport insertTokenHolders from '../queries/tokenHoldes';\nimport {\n  extractTransferAccounts, processTokenTransfers, isTransferEvent, processTransferEvent,\n} from './transfer';\nimport {\n  processEvmTokenHolders,\n  processNativeTokenHolders,\n} from './tokenHolder';\n\nconst blockHash = async (id: number): Promise<BlockHash> => {\n  const hash = await nodeProvider.query((provider) => provider.api.rpc.chain.getBlockHash(id));\n  return { id, hash };\n};\n\nconst blockBody = async ({ id, hash }: BlockHash): Promise<Block> => {\n  const provider = nodeProvider.getProvider();\n  const [signedBlock, extendedHeader, events] = await Promise.all([\n    provider.api.rpc.chain.getBlock(hash),\n    provider.api.derive.chain.getHeader(hash),\n    provider.api.query.system.events.at(hash),\n  ]);\n\n  // Parse the timestamp from the `timestamp.set` extrinsic\n  const firstExtrinsic = signedBlock.block.extrinsics[0];\n\n  let timestamp;\n  if (\n    firstExtrinsic\n    && firstExtrinsic.method.section === 'timestamp'\n    && firstExtrinsic.method.method === 'set'\n  ) {\n    timestamp = new Date(Number(firstExtrinsic.method.args)).toUTCString();\n  } else {\n    timestamp = await provider.api.query.timestamp.now.at(hash);\n    timestamp = new Date(timestamp.toJSON()).toUTCString();\n  }\n\n  return {\n    id,\n    hash,\n    signedBlock,\n    extendedHeader,\n    events,\n    timestamp,\n  };\n};\n\n// TODO move in queries/block.ts\nconst blockBodyToInsert = ({\n  id,\n  hash,\n  extendedHeader,\n  signedBlock,\n  timestamp,\n}: Block) => ({\n  id,\n  timestamp,\n  finalized: false,\n  hash: hash.toString(),\n  author: extendedHeader?.author?.toString() || '',\n  parentHash: signedBlock.block.header.parentHash.toString(),\n  stateRoot: signedBlock.block.header.stateRoot.toString(),\n  extrinsicRoot: signedBlock.block.header.extrinsicsRoot.toString(),\n});\n\nconst blockToExtrinsicsHeader = ({\n  id,\n  signedBlock,\n  events,\n  timestamp,\n}: Block): ExtrinsicHead[] => signedBlock.block.extrinsics.map((extrinsic, index) => ({\n  index,\n  extrinsic,\n  timestamp,\n  blockId: id,\n  events: events.filter(isExtrinsicEvent(index)),\n  status: extrinsicStatus(events),\n}));\n\nconst getSignedExtrinsicData = async (\n  extrinsicHash: string,\n): Promise<SignedExtrinsicData> => {\n  const [fee, feeDetails] = await Promise.all([\n    nodeProvider.query((provider) => provider.api.rpc.payment.queryInfo(extrinsicHash)),\n    nodeProvider.query((provider) => provider.api.rpc.payment.queryFeeDetails(extrinsicHash)),\n  ]);\n\n  return {\n    fee: fee.toJSON(),\n    feeDetails: feeDetails.toJSON(),\n  };\n};\n\nconst extrinsicBody = (nextFreeId: number) => async (\n  extrinsicHead: ExtrinsicHead,\n  index: number,\n): Promise<ExtrinsicBody> => ({\n  ...extrinsicHead,\n  id: nextFreeId + index,\n  signedData: extrinsicHead.extrinsic.isSigned\n    ? await getSignedExtrinsicData(extrinsicHead.extrinsic.toHex())\n    : undefined,\n});\n\nconst extrinsicToInsert = ({\n  id,\n  extrinsic,\n  signedData,\n  blockId,\n  events,\n  timestamp,\n  index,\n}: ExtrinsicBody): InsertExtrinsicBody => {\n  const status = extrinsicStatus(events);\n  const {\n    hash, method, args, meta,\n  } = extrinsic;\n  return {\n    id,\n    index,\n    blockId,\n    signedData,\n    timestamp,\n    status: status.type,\n    hash: hash.toString(),\n    method: method.method,\n    section: method.section,\n    signed: resolveSigner(extrinsic),\n    args: JSON.stringify(args),\n    docs: meta.docs.toLocaleString(),\n    errorMessage: status.type === 'error' ? status.message : '',\n  };\n};\n\nconst eventToBody = (nextFreeId: number) => (event: EventHead, index: number): EventBody => ({\n  id: nextFreeId + index,\n  ...event,\n});\n\nconst initialBlockToInsert = ({ id, hash }: BlockHash) => ({\n  id,\n  finalized: false,\n  hash: hash.toString(),\n  timestamp: `${new Date().toUTCString()}`,\n  author: '',\n  parentHash: '',\n  stateRoot: '',\n  extrinsicRoot: '',\n});\n\nexport const processInitialBlocks = async (\n  fromId: number,\n  toId: number,\n): Promise<number> => {\n  if (toId - fromId <= 0) {\n    return 0;\n  }\n\n  logger.info(`New unfinalized heads detected from ${fromId} to ${toId}`);\n\n  let transactions = 0;\n  const blockIds = range(fromId, toId);\n  nodeProvider.setDbBlockId(toId - 1);\n\n  logger.info('Retrieving unfinished block hashes');\n  transactions += blockIds.length;\n  const hashes = await resolvePromisesAsChunks(blockIds.map(blockHash));\n\n  // Insert blocks\n  logger.info('Inserting unfinished blocks in DB');\n  await insertMultipleBlocks(hashes.map(initialBlockToInsert));\n  return transactions;\n};\n\nexport default async (fromId: number, toId: number, save = true): Promise<number> => {\n  let transactions = 0;\n  const blockIds = range(fromId, toId);\n  nodeProvider.setDbBlockId(toId - 1);\n\n  logger.info('Retrieving block hashes');\n  transactions += blockIds.length * 2;\n\n  const provider = nodeProvider.getProvider();\n  const blockHashes = await Promise.all(\n    blockIds.map((id) => provider.api.rpc.chain.getBlockHash(id)),\n  );\n  const hashes = blockIds.map((id, i) => ({\n    id,\n    hash: blockHashes[i],\n  }));\n\n  logger.info('Retrieving block bodies');\n  let blocks = await Promise.all(hashes.map(blockBody));\n\n  // Insert blocks\n  if (save) {\n    logger.info('Inserting initial blocks in DB');\n    await insertMultipleBlocks(blocks.map(blockBodyToInsert));\n  }\n\n  // Extrinsics\n  logger.info('Extracting and compressing blocks extrinsics');\n  let extrinsicHeaders = blocks.map(blockToExtrinsicsHeader).flat();\n\n  logger.info('Retrieving next free extrinsic and event ids');\n  const [eid, feid] = await nextFreeIds();\n  logger.info(`Extrinsic next id: ${eid}, Event next id: ${feid}`);\n\n  logger.info('Retrieving neccessery extrinsic data');\n  transactions += extrinsicHeaders.length;\n  const extrinsics = await resolvePromisesAsChunks(\n    extrinsicHeaders.map(extrinsicBody(feid)),\n  );\n\n  // Free memory\n  blocks = [];\n  extrinsicHeaders = [];\n\n  // Events\n  logger.info('Extracting and compressing extrinisc events');\n  const events = extrinsics\n    .flatMap(extrinsicToEventHeader)\n    .map(eventToBody(eid));\n\n  if (save) {\n    logger.info('Inserting extriniscs');\n    await insertExtrinsics(extrinsics.map(extrinsicToInsert));\n    logger.info('Inserting events');\n    await insertEvents(events);\n  }\n\n  // Staking\n  logger.info('Resolving staking events');\n  const staking = await resolvePromisesAsChunks(\n    events\n      .filter(isEventStakingReward)\n      .map((e) => processStakingEvent({\n        ...e,\n        data: [\n          e.event.event.data[0].toString(),\n          e.event.event.data[1].toString(),\n        ],\n      })),\n  );\n\n  // Transfers\n  logger.info('Extracting native transfers');\n  let transfers = await resolvePromisesAsChunks(\n    events.filter(isTransferEvent).map(processTransferEvent),\n  );\n\n  // EVM Logs\n  logger.info('Retrieving EVM log if contract is ERC20 token');\n  const evmLogs = await extrinsicToEvmLogs(extrinsics);\n  transactions += evmLogs.length;\n\n  // Token Transfers\n  logger.info('Extracting token transfer');\n  let tokenTransfers = await processTokenTransfers(evmLogs);\n  transactions += tokenTransfers.length;\n  transfers.push(...tokenTransfers);\n  tokenTransfers = [];\n\n  // Evm Token Holders\n  logger.info('Extracting EVM token holders');\n  const tokenHolders = await processEvmTokenHolders(evmLogs);\n  transactions += tokenHolders.length;\n\n  // Accounts\n  logger.info('Compressing transfer, event accounts, evm claim account');\n  const allAccounts: AccountHead[] = [];\n  allAccounts.push(...transfers.flatMap(extractTransferAccounts));\n  allAccounts.push(...events.flatMap(accountNewOrKilled));\n  allAccounts.push(...staking.map(stakingToAccount));\n  allAccounts.push(\n    ...extrinsics\n      .filter(isExtrinsicEvmClaimAccount)\n      .flatMap(extrinsicToEvmClaimAccount),\n  );\n\n  logger.info('Extracting, compressing and dropping duplicate accounts');\n  let insertOrDeleteAccount = dropDuplicates(allAccounts, 'address').filter(\n    ({ address }) => address.length === 49,\n  );\n\n  logger.info('Retrieving used account info');\n  transactions += insertOrDeleteAccount.length;\n  let accounts = await resolvePromisesAsChunks(\n    insertOrDeleteAccount.map(accountHeadToBody),\n  );\n  insertOrDeleteAccount = [];\n\n  // Native token holders\n  logger.info('Extracting native token holders from accounts');\n  tokenHolders.push(...processNativeTokenHolders(accounts));\n\n  if (save) {\n    logger.info('Inserting or updating accounts');\n    await insertAccounts(accounts);\n    // Free memory\n    accounts = [];\n\n    // Staking Reward\n    logger.info('Inserting staking rewards');\n    await insertStaking(staking);\n\n    // Transfers\n    logger.info('Inserting transfers');\n    await insertTransfers(transfers);\n\n    transfers = [];\n\n    // Contracts\n    logger.info('Extracting new contracts');\n    let contracts = extrinsics\n      .filter(isExtrinsicEVMCreate)\n      .map(extrinsicToContract);\n    logger.info('Inserting contracts');\n    await insertContracts(contracts);\n    contracts = [];\n\n    logger.info('Inserting evm events');\n    await insertEvmEvents(events);\n\n    // Token holders\n    await insertTokenHolders(tokenHolders);\n\n    logger.info('Finalizing blocks');\n    await updateBlocksFinalized(fromId, toId);\n  }\n\n  logger.info('Complete!');\n  return transactions;\n};\n"]}