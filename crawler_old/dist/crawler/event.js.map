{"version":3,"file":"event.js","sourceRoot":"/","sources":["crawler/event.ts"],"names":[],"mappings":"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","sourcesContent":["import { nodeProvider } from '../utils/connector';\nimport { toChecksumAddress } from '../utils/utils';\nimport {\n  AccountBody, AccountHead, Event, EventHead, ExtrinsicBody,\n} from './types';\n\nexport const extrinsicToEventHeader = ({\n  id,\n  blockId,\n  events,\n  timestamp,\n  index: extrinsicIndex,\n  status,\n  signedData,\n}: ExtrinsicBody): EventHead[] => events.map((event, index) => ({\n  event,\n  index,\n  blockId,\n  timestamp,\n  extrinsicId: id,\n  extrinsicIndex,\n  status,\n  signedData,\n}));\n\nconst eventToAccountHead = (\n  { blockId, event, timestamp }: EventHead,\n  active = true,\n): AccountHead[] => {\n  const address = event.event.data[0].toString();\n  return [{\n    blockId, address, active, timestamp,\n  }];\n};\n\nexport const accountNewOrKilled = (eventHead: EventHead): AccountHead[] => {\n  const { event, blockId, timestamp } = eventHead;\n  if (nodeProvider.getProvider().api.events.balances.Endowed.is(event.event)) {\n    return eventToAccountHead(eventHead);\n  } if (nodeProvider.getProvider().api.events.staking.Rewarded.is(event.event)) {\n    return eventToAccountHead(eventHead);\n  } if (nodeProvider.getProvider().api.events.staking.Slashed.is(event.event)) {\n    return eventToAccountHead(eventHead);\n  } if (nodeProvider.getProvider().api.events.system.KilledAccount.is(event.event)) {\n    return eventToAccountHead(eventHead, false);\n  } if (nodeProvider.getProvider().api.events.balances.Reserved.is(event.event)) {\n    return eventToAccountHead(eventHead);\n  } if (nodeProvider.getProvider().api.events.balances.Transfer.is(event.event)) {\n    const res: any = event.event.data.toJSON();\n    return [\n      {\n        blockId, address: res[0], active: true, timestamp,\n      },\n      {\n        blockId, address: res[1], active: true, timestamp,\n      },\n    ];\n  }\n  return [];\n};\n\nexport const accountHeadToBody = async (\n  head: AccountHead,\n): Promise<AccountBody> => {\n  const [evmAddress, balances, identity] = await Promise.all([\n    nodeProvider.query((provider) => provider.api.query.evmAccounts.evmAddresses(head.address)),\n    nodeProvider.query((provider) => provider.api.derive.balances.all(head.address)),\n    nodeProvider.query((provider) => provider.api.derive.accounts.identity(head.address)),\n  ]);\n  const address = evmAddress.toString();\n  const eddress = address !== ''\n    ? toChecksumAddress(address)\n    : address;\n\n  const evmNonce: string | null = address !== ''\n    ? await nodeProvider.query((provider) => provider.api.query.evm.accounts(address))\n      .then((res): any => res.toJSON())\n      .then((res) => res?.nonce || 0)\n    : 0;\n\n  return {\n    ...head,\n    evmAddress: eddress,\n    freeBalance: balances.freeBalance.toString(),\n    lockedBalance: balances.lockedBalance.toString(),\n    availableBalance: balances.availableBalance.toString(),\n    vestedBalance: balances.vestedBalance.toString(),\n    votingBalance: balances.votingBalance.toString(),\n    reservedBalance: balances.reservedBalance.toString(),\n    identity: JSON.stringify(identity),\n    nonce: balances.accountNonce.toString(),\n    evmNonce,\n  };\n};\n\nexport const isEventStakingReward = ({ event: { event } }: EventHead): boolean => nodeProvider.getProvider().api.events.staking.Rewarded.is(event);\n\nexport const isEventStakingSlash = ({ event: { event } }: EventHead): boolean => nodeProvider.getProvider().api.events.staking.Slashed.is(event);\n\nexport const isExtrinsicEvent = (extrinsicIndex: number) => ({ phase }: Event): boolean => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(extrinsicIndex);\n"]}