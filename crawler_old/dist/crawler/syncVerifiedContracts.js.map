{"version":3,"file":"syncVerifiedContracts.js","sourceRoot":"/","sources":["crawler/syncVerifiedContracts.ts"],"names":[],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client/core';\nimport format from 'pg-format';\nimport { GraphqlServer, liveGraphqlServer, queryv2 } from '../utils/connector';\nimport logger from '../utils/logger';\nimport { toChecksumAddress } from '../utils/utils';\n\ninterface VerifiedContractAddresses {\n  verified_contract: {\n    address: string;\n  }[]\n}\ninterface VerifiedContract {\n  address: string;\n  name: string;\n  filename: string;\n  source: any;\n  optimization: boolean;\n  compiler_version: string;\n  compiled_data: any;\n  args: any[];\n  runs: number;\n  target: string;\n  type: string;\n  contract_data: any;\n}\n\ninterface LoadedVerifiedContracts {\n  verified_contract: VerifiedContract[];\n}\n\ninterface AddressesVar {\n  address: {} | { _in: string[] };\n}\n\nconst loadVerifiedContractAddresses = async (server: GraphqlServer): Promise<string[]> => server.query<VerifiedContractAddresses>({\n  query: gql`\n      query verified_addresses {\n        verified_contract {\n          address\n        }\n      }    \n    `,\n})\n  .then((res) => res.data.verified_contract\n    .map(({ address }) => address));\n\nconst insertVerifiedContracts = async (contracts: VerifiedContract[]): Promise<void> => {\n  await queryv2(\n    format(\n      `INSERT INTO verified_contract\n        (address, name, filename, source,  optimization, compiler_version, compiled_data,  args, runs, target, type, contract_data)\n      VALUES \n        %L\n      ON CONFLICT DO NOTHING;`,\n      contracts.map((c) => [\n        toChecksumAddress(c.address),\n        c.name,\n        c.filename,\n        JSON.stringify(c.source),\n        c.optimization,\n        c.compiler_version,\n        JSON.stringify(c.compiled_data),\n        JSON.stringify(c.args),\n        c.runs,\n        c.target,\n        c.type,\n        JSON.stringify(c.contract_data),\n      ]),\n    ),\n  );\n};\n\nconst loadVerifiedContracts = async (addresses: string[]): Promise<VerifiedContract[]> => liveGraphqlServer\n  .query<LoadedVerifiedContracts, AddressesVar>({\n    query: gql`\n      query verified_contracts($address: String_comparison_exp!) {\n        verified_contract(\n          where: { address: $address }\n        ) {\n          address\n          args\n          compiled_data\n          compiler_version\n          contract_data\n          filename\n          name\n          optimization\n          runs\n          source\n          target\n          timestamp\n          type\n        }\n      }    \n    `,\n    variables: { address: { _in: addresses } },\n  })\n  .then((res) => res.data.verified_contract);\n\nconst localVerifiedContractsAddresses = async (): Promise<string[]> => queryv2<{address: string}>('SELECT address FROM verified_contract')\n  .then((res) => res.map(({ address }) => address))\n  .then((res) => res.map((val) => val.toLocaleLowerCase()));\n\nexport default async (): Promise<void> => {\n  logger.info('Loading verified contract addresses');\n  const localVerifiedContracts = await localVerifiedContractsAddresses();\n  const liveVerifiedContracts = await loadVerifiedContractAddresses(liveGraphqlServer);\n\n  const missingContracts = liveVerifiedContracts\n    .filter((address) => !localVerifiedContracts.includes(address.toLocaleLowerCase()));\n\n  if (missingContracts.length === 0) {\n    return;\n  }\n\n  logger.info(`Loading following missing contracts: \\n- ${missingContracts.join('\\n- ')}`);\n  const contracts = await loadVerifiedContracts(missingContracts);\n\n  logger.info('Inserting missing contracts');\n  await insertVerifiedContracts(contracts);\n\n  logger.info('Verified contract sync complete');\n};\n"]}