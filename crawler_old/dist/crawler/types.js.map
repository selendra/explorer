{"version":3,"file":"types.js","sourceRoot":"/","sources":["crawler/types.ts"],"names":[],"mappings":"","sourcesContent":["import { AnyTuple } from '@polkadot/types/types';\nimport { GenericExtrinsic } from '@polkadot/types/extrinsic';\nimport { FrameSystemEventRecord } from '@polkadot/types/lookup';\nimport { JsonFragment } from '@ethersproject/abi';\nimport type { BlockHash as BH } from '@polkadot/types/interfaces/chain';\nimport type { SignedBlock } from '@polkadot/types/interfaces/runtime';\nimport type { HeaderExtended } from '@polkadot/api-derive/type/types';\nimport { Vec } from '@polkadot/types';\nimport { utils } from 'ethers';\n\nexport type Address = string;\nexport type EventId = number;\nexport type Signer = string;\nexport type Amount = string;\nexport type Timestamp = string;\n\nexport interface BlockHash {\n  id: number;\n  hash: BH;\n}\n\nexport type Extrinsic = GenericExtrinsic<AnyTuple>;\nexport type Event = FrameSystemEventRecord;\n\nexport interface Block extends BlockHash {\n  signedBlock: SignedBlock;\n  extendedHeader?: HeaderExtended;\n  events: Vec<Event>;\n  timestamp: string;\n}\n\ninterface ExtrinsicUnknown {\n  type: 'unknown';\n}\ninterface ExtrinsicSuccess {\n  type: 'success';\n}\ninterface ExtrinsicError {\n  type: 'error';\n  message: string;\n}\n\nexport interface DecodedEvmError {\n  address: string;\n  message: string;\n}\n\nexport type ExtrinsicStatus =\n  | ExtrinsicError\n  | ExtrinsicSuccess\n  | ExtrinsicUnknown;\n\nexport interface ExtrinsicHead {\n  index: number;\n  events: Event[];\n  blockId: number;\n  timestamp: string;\n  extrinsic: Extrinsic;\n  status: ExtrinsicStatus;\n}\n\nexport interface SignedExtrinsicData {\n  fee: any;\n  feeDetails: any;\n}\nexport interface ExtrinsicBody extends ExtrinsicHead {\n  id: number;\n  signedData?: SignedExtrinsicData;\n  index: number;\n}\n\nexport interface EventHead {\n  event: Event;\n  blockId: number;\n  timestamp: string;\n  extrinsicId: number;\n  index: number;\n  extrinsicIndex: number;\n  status: ExtrinsicStatus;\n  signedData?: SignedExtrinsicData;\n}\nexport interface EventBody extends EventHead {\n  id: number;\n}\n\nexport interface AccountHead {\n  address: string;\n  blockId: number;\n  active: boolean;\n  timestamp: string;\n}\nexport interface AccountBody extends AccountHead {\n  identity: string;\n  evmAddress: string;\n  freeBalance: string;\n  lockedBalance: string;\n  availableBalance: string;\n  vestedBalance: string;\n  votingBalance: string;\n  reservedBalance: string;\n  nonce: string;\n  evmNonce: string | null;\n}\n\nexport interface Transfer {\n  blockId: number;\n  extrinsicId: number;\n\n  denom?: string;\n  nftId?: string;\n\n  amount: string;\n  feeAmount: string;\n  type: 'Native' | 'ERC20' | 'ERC721' | 'ERC1155';\n\n  toAddress: string;\n  fromAddress: string;\n  tokenAddress: string;\n  fromEvmAddress: string;\n  toEvmAddress: string;\n\n  success: boolean;\n  errorMessage: string;\n\n  timestamp: string;\n}\n\nexport interface Contract {\n  address: string;\n  extrinsicId: number;\n  signer: string;\n\n  bytecode: string;\n  bytecodeContext: string;\n  bytecodeArguments: string;\n\n  gasLimit: string;\n  storageLimit: string;\n\n  timestamp: string;\n}\n\nexport type ABI = JsonFragment[];\n\nexport interface ABIS {\n  [name: string]: ABI;\n}\n\nexport interface ERC721Data {\n  name: string;\n  symbol: string;\n}\nexport interface ERC20Data extends ERC721Data {\n  decimals: number;\n}\n\nexport type TokenType = 'ERC20' | 'ERC721' | 'ERC1155';\ntype VerifiedContractType = 'other' | TokenType;\ntype VerifiedContractData = null | ERC20Data | ERC721Data; // TODO change null to empty object\n\nexport interface VerifiedContract {\n  name: string;\n  address: string;\n  compiled_data: ABIS;\n  type: VerifiedContractType;\n  contract_data: VerifiedContractData;\n}\n\nexport interface ERC20Token extends VerifiedContract {\n  type: 'ERC721';\n  contract_data: ERC721Data;\n}\nexport interface ERC721Token extends VerifiedContract {\n  type: 'ERC20';\n  contract_data: ERC721Data;\n}\n\nexport interface RawEventData {\n  address: string,\n  topics:string[],\n  data: string,\n}\n\nexport interface BytecodeLog {\n  data: string;\n  address: string;\n  topics: string[];\n}\n\nexport interface BytecodeLogWithBlockId extends BytecodeLog {\n  blockId: number;\n  timestamp: string;\n  extrinsicId: number;\n  signedData: SignedExtrinsicData;\n}\n\nexport interface EvmLog extends BytecodeLogWithBlockId {\n  abis: ABIS;\n  name: string;\n  type: VerifiedContractType;\n  contractData: VerifiedContractData;\n}\n\nexport interface EvmLogWithDecodedEvent extends EvmLog {\n  decodedEvent: utils.LogDescription;\n}\n\nexport interface EVMEventData {\n  id: number;\n  data: any;\n  method: string;\n  blockId: number;\n  section: string;\n  timestamp: string;\n  eventIndex: number;\n  extrinsicIndex: number;\n}\n\nexport interface EvmEvent {\n  id: number;\n  eventid: number;\n  blockid: number;\n  eventindex: number;\n  extrinsicindex: number;\n  contractaddress: string;\n  rawdata: RawEventData;\n  parseddata: utils.LogDescription;\n  method: string;\n  type: string;\n  status: string;\n  topic0: string;\n  topic1: string;\n  topic2: string;\n  topic3: string;\n}\n\nexport interface BacktrackingEvmEvent extends EvmEvent {\n  extrinsicid: number;\n  timestamp: string;\n  signeddata: SignedExtrinsicData;\n}\n\ntype TokenHolderType = 'Contract' | 'Account';\ntype TokenHolderInfo = null | ERC20Data | ERC721Data; // TODO change null to empty object\ntype TokenHolderNftId = null | string;\n\nexport interface NativeTokenHolderHead {\n  timestamp: string;\n  tokenAddress: string;\n  info: TokenHolderInfo;\n  signerAddress: string;\n}\n\nexport interface TokenBalanceHead extends NativeTokenHolderHead {\n  abi: ABI;\n}\n\ninterface TokenHolderBase {\n  timestamp: string;\n  evmAddress: string;\n  tokenAddress: string;\n  info: TokenHolderInfo;\n  nftId: TokenHolderNftId;\n}\n\nexport interface TokenHolderHead extends TokenHolderBase {\n  abi: ABI,\n  type: TokenType\n}\n\nexport interface TokenHolder extends TokenHolderBase {\n  balance: string;\n  type: TokenHolderType;\n  signerAddress: string;\n}\n\nexport interface CompleteEvmData {\n  raw: RawEventData;\n  parsed?: any;\n  status: 'Success' | 'Error';\n  type: 'Verified' | 'Unverified';\n}\n\n// Staking\n\ntype StakingType = 'Slash' | 'Reward';\n\nexport type StakingInsert = [EventId, Signer, Amount, StakingType, Timestamp];\n\nexport interface NeededStakingValues {\n  id: number;\n  blockId: number;\n  timestamp: string;\n  data: [Address, Amount]\n}\n\nexport interface Staking {\n  blockId: number;\n  eventId: EventId;\n  type: StakingType;\n  timestamp: Timestamp;\n  signer: Signer;\n  amount: Amount;\n}\n"]}