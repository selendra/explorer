{"version":3,"file":"backtracking.js","sourceRoot":"/","sources":["backtracking.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAuC;AACvC,uDAAqD;AACrD,iDAA0D;AAC1D,4DAAoC;AACpC,sDAA8B;AAC9B,yCAAqC;AACrC,mEAAsD;AAEtD,0CAA0C;AAC1C,MAAM,CAAC,IAAI,CAAC;IACV,GAAG,EAAE,gBAAM,CAAC,qBAAqB;IACjC,gBAAgB,EAAE,GAAG;IACrB,YAAY,EAAE;QACZ,IAAI,4BAAa,CAAC;YAChB,IAAI,EAAE,MAAM,CAAC,SAAS;SACvB,CAAC;KACH;IACD,WAAW,EAAE,gBAAM,CAAC,WAAW;CAChC,CAAC,CAAC;AACH,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;AAC3C,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,gBAAM,CAAC,OAAO,CAAC,CAAC;AAMzC,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;IACjC,OAAO,IAAI,EAAE;QACX,qDAAqD;QACrD,MAAM,SAAS,GAAG,MAAM,IAAA,mBAAO,EAAU,mDAAmD,CAAC,CAAC;QAE9F,KAAK,IAAI,aAAa,GAAG,CAAC,EAAE,aAAa,GAAG,SAAS,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,EAAE;YAChF,uCAAuC;YACvC,MAAM,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;YAC7C,MAAM,IAAA,sBAAuB,EAAC,OAAO,CAAC,CAAC;YACvC,MAAM,IAAA,mBAAO,EAAC,+DAA+D,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;SAC3F;QAED,MAAM,IAAA,YAAI,EAAC,IAAI,CAAC,CAAC;KAClB;AACH,CAAC,CAAC;AAEF,OAAO,CAAC,OAAO,EAAE;KACd,IAAI,CAAC,KAAK,IAAI,EAAE;IACf,MAAM,wBAAY,CAAC,mBAAmB,EAAE,CAAC;AAC3C,CAAC,CAAC;KACD,IAAI,CAAC,eAAe,CAAC;KACrB,IAAI,CAAC,KAAK,IAAI,EAAE;IACf,MAAM,wBAAY,CAAC,cAAc,EAAE,CAAC;IACpC,gBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACxB,OAAO,CAAC,IAAI,EAAE,CAAC;AACjB,CAAC,CAAC;KACD,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;IACrB,gBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACpB,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC/B,MAAM,wBAAY,CAAC,cAAc,EAAE,CAAC;IACpC,gBAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACzB,MAAM;SACH,KAAK,CAAC,IAAI,CAAC;SACX,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC","sourcesContent":["import * as Sentry from '@sentry/node';\nimport { RewriteFrames } from '@sentry/integrations';\nimport { nodeProvider, queryv2 } from './utils/connector';\nimport logger from './utils/logger';\nimport config from './config';\nimport { wait } from './utils/utils';\nimport backtractContractEvents from './backtracking/';\n\n/* eslint \"no-underscore-dangle\": \"off\" */\nSentry.init({\n  dsn: config.sentryBacktrackingDns,\n  tracesSampleRate: 1.0,\n  integrations: [\n    new RewriteFrames({\n      root: global.__dirname,\n    }),\n  ],\n  environment: config.environment,\n});\nSentry.setTag('component', 'backtracking');\nSentry.setTag('network', config.network);\n\ninterface Address {\n  address: string;\n}\n\nconst backtrackEvents = async () => {\n  while (true) {\n    // Get contract from newly verificated contract table\n    const contracts = await queryv2<Address>('SELECT address FROM newly_verified_contract_queue');\n\n    for (let contractIndex = 0; contractIndex < contracts.length; contractIndex += 1) {\n      // Process contract events & store them\n      const { address } = contracts[contractIndex];\n      await backtractContractEvents(address);\n      await queryv2('DELETE FROM newly_verified_contract_queue WHERE address = $1;', [address]);\n    }\n\n    await wait(1000);\n  }\n};\n\nPromise.resolve()\n  .then(async () => {\n    await nodeProvider.initializeProviders();\n  })\n  .then(backtrackEvents)\n  .then(async () => {\n    await nodeProvider.closeProviders();\n    logger.info('Finished');\n    process.exit();\n  })\n  .catch(async (error) => {\n    logger.error(error);\n    Sentry.captureException(error);\n    await nodeProvider.closeProviders();\n    logger.error('Finished');\n    Sentry\n      .close(2000)\n      .then(() => process.exit(-1));\n  });\n"]}