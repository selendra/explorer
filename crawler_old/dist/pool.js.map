{"version":3,"file":"pool.js","sourceRoot":"/","sources":["pool.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/node';\nimport { RewriteFrames } from '@sentry/integrations';\nimport { nodeProvider, queryv2 } from './utils/connector';\nimport logger from './utils/logger';\nimport config from './config';\nimport { wait } from './utils/utils';\nimport processPoolEvent from './pool/';\n/* eslint \"no-underscore-dangle\": \"off\" */\nSentry.init({\n  dsn: config.sentryBacktrackingDns,\n  tracesSampleRate: 1.0,\n  integrations: [\n    new RewriteFrames({\n      root: global.__dirname,\n    }),\n  ],\n  environment: config.environment,\n});\nSentry.setTag('component', 'pools');\nSentry.setTag('network', config.network);\n\nconst getFirstQueryValue = async <T, >(statement: string, args = [] as any[]): Promise<T> => {\n  const res = await queryv2<T>(statement, args);\n  if (res.length === 0) {\n    throw new Error(`Query was empty: \\n\\t${statement}\\narguments: \\n\\t ${args}`);\n  }\n  return res[0];\n};\n\ninterface ID {\n  id: number\n}\n\nconst findPoolEvent = async (evmEventId: string): Promise<ID[]> => queryv2<ID>('SELECT id FROM pool_event WHERE evm_event_id = $1;', [evmEventId]);\n\nconst getCurrentPoolPointer = async (): Promise<string> => (await getFirstQueryValue<{currval: string}>('SELECT last_value as currval FROM pool_event_sequence')).currval;\n\nconst getNextPoolPointer = async (): Promise<string> => (await getFirstQueryValue<{nextval: string}>('SELECT nextval(\\'pool_event_sequence\\');')).nextval;\n\nconst checkIfEventExists = async (id: string): Promise<boolean> => {\n  const event = await queryv2<unknown>('SELECT id FROM evm_event WHERE id = $1;', [id]);\n  return event.length > 0;\n};\n\nconst checkIfPoolEventExists = async (id: string): Promise<boolean> => {\n  const events = await findPoolEvent(id);\n  return events.length > 0;\n};\n\nconst findInitialIndex = async (): Promise<string> => {\n  let currentEvmEventPointer = await getCurrentPoolPointer();\n\n  // Initializion with current evm event pointer to make sure last pool event was written in DB\n  while (await checkIfPoolEventExists(currentEvmEventPointer)) {\n    currentEvmEventPointer = await getNextPoolPointer();\n  }\n\n  return currentEvmEventPointer;\n};\n\nconst isCurrentPointerInGap = async (id: string): Promise<boolean> => {\n  const events = await queryv2<unknown>(\n    'SELECT id FROM evm_event WHERE id > $1 LIMIT 1;',\n    [id],\n  );\n  return events.length > 0;\n};\n\nconst poolEvents = async () => {\n  let currentEvmEventPointer = await findInitialIndex();\n\n  while (true) {\n    // If evm event does not exist wait for one second and retry\n    if (await checkIfEventExists(currentEvmEventPointer)) {\n      // process evm evnt pointer\n      await processPoolEvent(currentEvmEventPointer);\n      currentEvmEventPointer = await getNextPoolPointer();\n    } else if (await isCurrentPointerInGap(currentEvmEventPointer)) {\n      currentEvmEventPointer = await getNextPoolPointer();\n    } else {\n      await wait(1000);\n    }\n  }\n};\n\nPromise.resolve()\n  .then(async () => {\n    await nodeProvider.initializeProviders();\n    logger.info(`Factory address used: ${config.selendraswapFactoryAddress}`);\n  })\n  .then(poolEvents)\n  .then(async () => {\n    await nodeProvider.closeProviders();\n    logger.info('Finished');\n    process.exit();\n  })\n  .catch(async (error) => {\n    logger.error(error);\n    Sentry.captureException(error);\n    await nodeProvider.closeProviders();\n    logger.error('Finished');\n    Sentry\n      .close(2000)\n      .then(() => process.exit(-1));\n  });\n"]}