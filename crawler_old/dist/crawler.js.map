{"version":3,"file":"crawler.js","sourceRoot":"/","sources":["crawler.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/node';\nimport { RewriteFrames } from '@sentry/integrations';\nimport config from './config';\nimport processBlocks, { processInitialBlocks } from './crawler/block';\nimport { deleteUnfinishedBlocks, lastBlockInDatabase } from './queries/block';\nimport { nodeProvider } from './utils/connector';\nimport { min, promiseWithTimeout, wait } from './utils/utils';\nimport logger from './utils/logger';\nimport parseAndInsertSubContracts from './crawler/contracts';\nimport syncVerifiedContracts from './crawler/syncVerifiedContracts';\n// Importing @sentry/tracing patches the global hub for tracing to work.\n// import * as Tracing from \"@sentry/tracing\";\n\n/* eslint \"no-underscore-dangle\": \"off\" */\nSentry.init({\n  dsn: config.sentryDns,\n  tracesSampleRate: 1.0,\n  integrations: [\n    new RewriteFrames({\n      root: global.__dirname,\n    }),\n  ],\n  environment: config.environment,\n});\nSentry.setTag('component', 'crawler');\nSentry.setTag('network', config.network);\n\nconsole.warn = () => {};\n\nconst processNextBlock = async () => {\n  let BLOCKS_PER_STEP = config.startBlockSize;\n  let currentBlockIndex = await lastBlockInDatabase();\n  let updateSubContractsCounter = 0;\n  let updateVerifiedContracts = 0;\n\n  while (true) {\n    const chainHead = nodeProvider.lastBlockId();\n    const finalizedHead = nodeProvider.lastFinalizedBlockId();\n\n    while (currentBlockIndex < finalizedHead) {\n      const difference = min(chainHead - currentBlockIndex, BLOCKS_PER_STEP);\n      const finalizedDifference = min(finalizedHead - currentBlockIndex, BLOCKS_PER_STEP);\n\n      const from = currentBlockIndex + 1;\n      const to = from + finalizedDifference;\n\n      const start = Date.now();\n\n      let transactions = 0;\n      nodeProvider.setDbBlockId(from + difference - 1);\n      // // Processing unfinalized blocks\n      transactions += await processInitialBlocks(to, from + difference);\n\n      // Processing finalized blocks\n      transactions += await processBlocks(from, to);\n\n      currentBlockIndex = to - 1;\n      const ms = Date.now() - start;\n      const time = ms / 1000;\n      const bps = finalizedDifference / time;\n\n      logger.info(\n        `n nodes: ${\n          config.nodeUrls.length\n        }\\tn blocks: ${finalizedDifference}\\tbps: ${bps.toFixed(\n          3,\n        )}\\tn transactions: ${transactions}\\ttps: ${(transactions / time).toFixed(\n          3,\n        )}\\ttime: ${time.toFixed(3)} s\\tblock from ${from} to ${to}`,\n      );\n      BLOCKS_PER_STEP = min(BLOCKS_PER_STEP * 2, config.maxBlocksPerStep);\n    }\n\n    // Missing Contracts - Inefficient pattern\n    updateSubContractsCounter += 1;\n    if (updateSubContractsCounter > config.subcontractInterval) {\n      await parseAndInsertSubContracts(finalizedHead);\n      updateSubContractsCounter = 0;\n    }\n\n    /**\n     * Verification contract sync will only be triggered when:\n     * - sync is enabled\n     * - crawler is in \"listening\" mode\n     * - on every nth interval\n     */\n    updateVerifiedContracts += 1;\n    if (\n      config.verifiedContractSync\n      && (finalizedHead - currentBlockIndex) <= 3\n      && updateVerifiedContracts > config.verifiedContractSyncInterval\n    ) {\n      await syncVerifiedContracts();\n      updateVerifiedContracts = 0;\n    }\n\n    await wait(config.pollInterval);\n  }\n};\n\nPromise.resolve()\n  .then(async () => {\n    await nodeProvider.initializeProviders();\n  })\n  .then(async () => {\n    logger.info('Removing unfinished blocks...');\n    await deleteUnfinishedBlocks();\n    logger.info('...success');\n  })\n  .then(() => {\n    logger.info(`Contract verification sync: ${config.verifiedContractSync}`);\n  })\n  .then(processNextBlock)\n  .then(async () => {\n    await nodeProvider.closeProviders();\n    logger.info('Finished');\n    process.exit();\n  })\n  .catch(async (error) => {\n    logger.error(error);\n    Sentry.captureException(error);\n\n    try {\n      await promiseWithTimeout(nodeProvider.closeProviders(), 200, Error('Failed to close proivders!'));\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n\n    logger.error('Finished');\n    Sentry.close(2000).then(() => {\n      process.exit(-1);\n    });\n  });\n"]}