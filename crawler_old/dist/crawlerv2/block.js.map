{"version":3,"file":"block.js","sourceRoot":"/","sources":["crawlerv2/block.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockHash } from '@polkadot/types/interfaces/chain';\nimport { Block } from '../crawler/types';\nimport { insertBlock, updateBlockFinalized } from '../queries/block';\nimport { nodeProvider, queryv2 } from '../utils/connector';\nimport logger from '../utils/logger';\nimport resolveEvent from './extrinsic/event';\nimport DefaultEvent from './extrinsic/event/DefaultEvent';\nimport Extrinsic from './extrinsic/Extrinsic';\nimport AccountManager from './managers/AccountManager';\n\ntype EventMap = {[extrinsicId: number]: DefaultEvent[]};\n\nconst blockBody = async (id: number, hash: BlockHash): Promise<Block> => {\n  const provider = nodeProvider.getProvider();\n  const [signedBlock, extendedHeader, events] = await Promise.all([\n    provider.api.rpc.chain.getBlock(hash),\n    provider.api.derive.chain.getHeader(hash),\n    provider.api.query.system.events.at(hash),\n  ]);\n\n  // Parse the timestamp from the `timestamp.set` extrinsic\n  const firstExtrinsic = signedBlock.block.extrinsics[0];\n\n  let timestamp;\n  if (\n    firstExtrinsic\n    && firstExtrinsic.method.section === 'timestamp'\n    && firstExtrinsic.method.method === 'set'\n  ) {\n    timestamp = new Date(Number(firstExtrinsic.method.args)).toUTCString();\n  } else {\n    timestamp = await provider.api.query.timestamp.now.at(hash);\n    timestamp = new Date(timestamp.toJSON()).toUTCString();\n  }\n\n  return {\n    id,\n    hash,\n    signedBlock,\n    extendedHeader,\n    events,\n    timestamp,\n  };\n};\n\nconst reduceExtrinsicEvents = (acc: EventMap, event: DefaultEvent): EventMap => {\n  if (event.head.event.phase.isApplyExtrinsic) {\n    const eventExtrinsic = event.head.event.phase.asApplyExtrinsic.toNumber();\n\n    if (!acc[eventExtrinsic]) {\n      acc[eventExtrinsic] = [];\n    }\n\n    acc[eventExtrinsic].push(event);\n  }\n\n  return acc;\n};\n\nconst formateBlockBody = ({\n  id,\n  hash,\n  extendedHeader,\n  signedBlock,\n  timestamp,\n}: Block) => ({\n  id,\n  timestamp,\n  finalized: false,\n  hash: hash.toString(),\n  author: extendedHeader?.author?.toString() || '',\n  parentHash: signedBlock.block.header.parentHash.toString(),\n  stateRoot: signedBlock.block.header.stateRoot.toString(),\n  extrinsicRoot: signedBlock.block.header.extrinsicsRoot.toString(),\n});\n\nconst formatUnfinalizedBlock = (id: number, hash: BlockHash) => ({\n  id,\n  finalized: false,\n  hash: hash.toString(),\n  timestamp: `${new Date().toUTCString()}`,\n  author: '',\n  parentHash: '',\n  stateRoot: '',\n  extrinsicRoot: '',\n});\n\nconst waitForBlockToFinish = async (id: number): Promise<void> => {\n  let res = await queryv2<{id: number}>('SELECT id FROM block WHERE id = $1 AND finalized = true;', [id]);\n  while (res.length === 0) {\n    res = await queryv2<{id: number}>('SELECT id FROM block WHERE id = $1 AND finalized = true;', [id]);\n  }\n};\n\nexport const processUnfinalizedBlock = async (\n  id: number,\n) => {\n  logger.info(`New unfinalized head detected ${id}`);\n  const hash = await nodeProvider.query((provider) => provider.api.rpc.chain.getBlockHash(id));\n\n  // Insert blocks\n  logger.info('Inserting unfinalized block');\n  await insertBlock(formatUnfinalizedBlock(id, hash));\n};\n\nconst processBlock = async (blockId: number): Promise<void> => {\n  logger.info('--------------------------------');\n  // Load block hash\n  logger.info(`Loading block hash for: ${blockId}`);\n  const hash = await nodeProvider.query((provider) => provider.api.rpc.chain.getBlockHash(blockId));\n\n  // Load block\n  logger.info(`Loading block for: ${blockId}`);\n  const block = await blockBody(blockId, hash);\n\n  // Inserting initial block and marking it as unfinalized\n  logger.info(`Inserting unfinalized block: ${blockId}`);\n  await insertBlock(formateBlockBody(block));\n\n  // Storing events for each extrinsic\n  logger.info('Resolving events & mapping them to extrinsic');\n  const events = await Promise.all(block.events.map(async (event, index) => resolveEvent({\n    blockId,\n    event,\n    index,\n    timestamp: block.timestamp,\n  })));\n  const mappedEvents = events.reduce(reduceExtrinsicEvents, {});\n  const accountManager = new AccountManager(blockId, block.timestamp);\n\n  logger.info('Resolving extrinsics');\n  const extrinsics = block.signedBlock.block.extrinsics.map((extr, index) => new Extrinsic(\n    blockId,\n    index,\n    block.timestamp,\n    extr,\n    mappedEvents[index],\n  ));\n\n  logger.info('Processing extrinsics & events');\n  await Promise.all(extrinsics.map(async (extrinisc) => extrinisc.process(accountManager)));\n\n  logger.info('Waiting for the previous block to finish');\n  await waitForBlockToFinish(blockId - 1);\n\n  // First saving all used accounts\n  await accountManager.save();\n\n  // Chain saving all extrinsic and events\n  logger.info('Saving extrinsic & their events');\n  await Promise.all(extrinsics.map(async (extrinisc) => extrinisc.save()));\n\n  // Updating block finalization\n  logger.info(`Finalizing block ${blockId}`);\n  await updateBlockFinalized(blockId);\n};\n\nexport default processBlock;\n"]}