{"version":3,"file":"AccountManager.js","sourceRoot":"/","sources":["crawlerv2/managers/AccountManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { AccountBody, TokenHolder } from '../../crawler/types';\nimport { findNativeAddress } from '../../crawler/utils';\nimport { insertAccounts } from '../../queries/event';\nimport { nodeProvider } from '../../utils/connector';\nimport logger from '../../utils/logger';\nimport { SELENDRA_CONTRACT_ADDRESS, SELENDRA_DEFAULT_DATA, toChecksumAddress } from '../../utils/utils';\nimport { insertAccountTokenHolders } from '../../queries/tokenHoldes';\n\n// Account manager stores used accounts and allows to trigger account save\nclass AccountManager {\n  blockId: number;\n\n  blockTimestamp: string;\n\n  accounts: {[address: string]: AccountBody};\n\n  constructor(blockId: number, timestamp: string) {\n    this.accounts = {};\n    this.blockId = blockId;\n    this.blockTimestamp = timestamp;\n  }\n\n  async use(address: string, active = true) {\n    // If account does not exist, we extract his info and store it\n    if (!this.accounts[address]) {\n      this.accounts[address] = await this.accountInfo(address);\n    }\n\n    this.accounts[address].active = active;\n    return this.accounts[address];\n  }\n\n  async useEvm(evmAddress: string): Promise<string> {\n    // Node/Empty/Root address is presented as 0x\n    if (evmAddress === '0x0000000000000000000000000000000000000000') {\n      return '0x';\n    }\n    const address = await findNativeAddress(evmAddress);\n\n    // Address can also be of contract and for this case node returns empty string\n    // We are only processing accounts in accounts manager!\n    if (address !== '') {\n      await this.use(address);\n      return address;\n    }\n\n    return '0x';\n  }\n\n  async save(): Promise<void> {\n    const accounts = Object.keys(this.accounts);\n    const usedAccounts = accounts.map((address) => this.accounts[address]);\n\n    if (usedAccounts.length === 0) {\n      return;\n    }\n\n    // Saving used accounts\n    logger.info(`Updating accounts: \\n\\t- ${accounts.join(', \\n\\t- ')}`);\n    await insertAccounts(usedAccounts);\n\n    // Converting accounts into token holders\n    const tokenHolders: TokenHolder[] = usedAccounts\n      .map((account) => ({\n        timestamp: account.timestamp,\n        signerAddress: account.address,\n        tokenAddress: SELENDRA_CONTRACT_ADDRESS,\n        info: { ...SELENDRA_DEFAULT_DATA },\n        balance: account.freeBalance,\n        type: 'Account',\n        evmAddress: '',\n        nftId: null,\n      }));\n\n    // Updating account native token holder\n    logger.info('Updating native token holders for used accounts');\n    await insertAccountTokenHolders(tokenHolders);\n  }\n\n  private async accountInfo(address: string): Promise<AccountBody> {\n    const [evmAddress, balances, identity] = await Promise.all([\n      nodeProvider.query((provider) => provider.api.query.evmAccounts.evmAddresses(address)),\n      nodeProvider.query((provider) => provider.api.derive.balances.all(address)),\n      nodeProvider.query((provider) => provider.api.derive.accounts.identity(address)),\n    ]);\n\n    // TODO clean below code\n    const addr = evmAddress.toString();\n    const evmAddr = addr !== ''\n      ? toChecksumAddress(addr)\n      : addr;\n\n    const evmNonce: string | null = addr !== ''\n      ? await nodeProvider.query((provider) => provider.api.query.evm.accounts(addr))\n        .then((res): any => res.toJSON())\n        .then((res) => res?.nonce || 0)\n      : 0;\n\n    return {\n      address,\n      evmNonce,\n      active: true,\n      evmAddress: evmAddr,\n      blockId: this.blockId,\n      timestamp: this.blockTimestamp,\n      freeBalance: balances.freeBalance.toString(),\n      lockedBalance: balances.lockedBalance.toString(),\n      availableBalance: balances.availableBalance.toString(),\n      vestedBalance: balances.vestedBalance.toString(),\n      votingBalance: balances.votingBalance.toString(),\n      reservedBalance: balances.reservedBalance.toString(),\n      identity: JSON.stringify(identity),\n      nonce: balances.accountNonce.toString(),\n    };\n  }\n}\n\nexport default AccountManager;\n"]}