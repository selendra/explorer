{"version":3,"file":"Extrinsic.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/Extrinsic.ts"],"names":[],"mappings":"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","sourcesContent":["import { GenericExtrinsic } from '@polkadot/types/extrinsic';\nimport { SpRuntimeDispatchError } from '@polkadot/types/lookup';\nimport { AnyTuple } from '@polkadot/types/types';\nimport { ExtrinsicStatus, SignedExtrinsicData } from '../../crawler/types';\nimport { nodeProvider, queryv2 } from '../../utils/connector';\nimport logger from '../../utils/logger';\nimport AccountManager from '../managers/AccountManager';\nimport { ExtrinsicData } from '../types';\nimport DefaultEvent from './event/DefaultEvent';\n\ntype Extr = GenericExtrinsic<AnyTuple>\n\nconst extractErrorMessage = (error: SpRuntimeDispatchError): string => {\n  if (error.isModule) {\n    const errorModule = error.asModule;\n    const { docs, name, section } = errorModule.registry.findMetaError(errorModule);\n    return `${section}.${name}: ${docs}`;\n  }\n  return error.toString();\n};\n\nconst extrinsicStatus = (extrinsicEvents: DefaultEvent[]): ExtrinsicStatus => extrinsicEvents.reduce(\n  (prev, { head: { event: { event } } }) => {\n    if (\n      prev.type === 'unknown'\n        && nodeProvider.getProvider().api.events.system.ExtrinsicSuccess.is(event)\n    ) {\n      return { type: 'success' };\n    } if (nodeProvider.getProvider().api.events.system.ExtrinsicFailed.is(event)) {\n      const [dispatchedError] = event.data;\n      return {\n        type: 'error',\n        message: extractErrorMessage(dispatchedError),\n      };\n    }\n    return prev;\n  },\n    { type: 'unknown' } as ExtrinsicStatus,\n);\n\nclass Extrinsic {\n  id?: number;\n\n  index: number;\n\n  extrinsic: Extr;\n\n  blockId: number;\n\n  timestamp: string;\n\n  events: DefaultEvent[];\n\n  status?: ExtrinsicStatus;\n\n  signedData?: SignedExtrinsicData;\n\n  constructor(blockId: number, index: number, timestamp: string, extrinsic: Extr, events: DefaultEvent[]) {\n    this.events = events;\n    this.blockId = blockId;\n    this.index = index;\n    this.timestamp = timestamp;\n    this.extrinsic = extrinsic;\n  }\n\n  private static async getSignedData(hash: string): Promise<SignedExtrinsicData> {\n    const [fee, feeDetails] = await Promise.all([\n      nodeProvider.query((provider) => provider.api.rpc.payment.queryInfo(hash)),\n      nodeProvider.query((provider) => provider.api.rpc.payment.queryFeeDetails(hash)),\n    ]);\n\n    return {\n      fee: fee.toJSON(),\n      feeDetails: feeDetails.toJSON(),\n    };\n  }\n\n  private static async nextId(): Promise<number> {\n    const result = await queryv2<{nextval: string}>('SELECT nextval(\\'extrinsic_sequence\\');');\n    return parseInt(result[0].nextval, 10);\n  }\n\n  private static async idExists(id: number): Promise<boolean> {\n    const exist = await queryv2<{id: string}>('SELECT id FROM extrinsic WHERE id = $1', [id]);\n    return exist.length > 0;\n  }\n\n  private static async getId(): Promise<number> {\n    let id = await Extrinsic.nextId();\n    while (await Extrinsic.idExists(id)) {\n      id = await Extrinsic.nextId();\n    }\n    return id;\n  }\n\n  async process(accountsManager: AccountManager): Promise<void> {\n    this.id = await Extrinsic.getId();\n\n    // Extracting signed data\n    this.signedData = this.extrinsic.isSigned\n      ? await Extrinsic.getSignedData(this.extrinsic.toHex())\n      : undefined;\n\n    this.status = extrinsicStatus(this.events);\n    // Process all extrinsic events\n    logger.info('Processing extrinsic events');\n    await Promise.all(this.events.map(async (event) => event.process(accountsManager)));\n  }\n\n  async save(): Promise<void> {\n    if (!this.id) {\n      throw new Error('Extrinsic id was not claimed!');\n    }\n    if (!this.status) {\n      throw new Error('Extrinsic status was not claimed!');\n    }\n\n    logger.info(`Insertin ${this.id} extrinsic`);\n    await queryv2(\n      `\n      INSERT INTO extrinsic \n        (id, block_id, index, hash, args, docs, method, section, signer, status, error_message, type, signed_data, timestamp)\n      VALUES\n        ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)`,\n      [\n        this.id,\n        this.blockId,\n        this.index,\n        this.extrinsic.hash.toString(),\n        JSON.stringify(this.extrinsic.args),\n        this.extrinsic.meta.docs.toLocaleString(),\n        this.extrinsic.method.method.toString(),\n        this.extrinsic.method.section.toString(),\n        this.extrinsic.signer?.toString() || '0x',\n        this.status.type,\n        this.status.type === 'error' ? this.status.message : '',\n        this.extrinsic.signer ? 'signed' : 'unsigned',\n        this.signedData ? JSON.stringify(this.signedData) : null,\n        this.timestamp,\n      ],\n    );\n\n    const extrinsicData: ExtrinsicData = {\n      id: this.id,\n      index: this.index,\n      status: this.status,\n      signedData: this.signedData,\n      args: this.extrinsic.args,\n    };\n\n    await Promise.all(this.events.map(async (event) => event.save(extrinsicData)));\n  }\n}\n\nexport default Extrinsic;\n"]}