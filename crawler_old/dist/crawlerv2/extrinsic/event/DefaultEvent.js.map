{"version":3,"file":"DefaultEvent.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/DefaultEvent.ts"],"names":[],"mappings":";;;;;AAAA,kDAAqD;AACrD,wDAAmD;AACnD,mEAA2C;AAI3C,MAAM,YAAY;IAOhB,YAAY,IAAe;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,MAAM;QACzB,MAAM,MAAM,GAAG,MAAM,IAAA,mBAAO,EAAoB,qCAAqC,CAAC,CAAC;QACvF,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAU;QACtC,MAAM,KAAK,GAAG,MAAM,IAAA,mBAAO,EAAe,oCAAoC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACtF,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC1B,CAAC;IAEO,MAAM,CAAC,KAAK,CAAC,KAAK;QACxB,IAAI,EAAE,GAAG,MAAM,YAAY,CAAC,MAAM,EAAE,CAAC;QACrC,OAAO,MAAM,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;YACtC,EAAE,GAAG,MAAM,YAAY,CAAC,MAAM,EAAE,CAAC;SAClC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,eAA+B;QAC3C,IAAI,CAAC,EAAE,GAAG,MAAM,YAAY,CAAC,KAAK,EAAE,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,aAA4B;QACrC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC7C;QACD,gBAAM,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,EAAE,QAAQ,CAAC,CAAC;QAE1C,MAAM,IAAA,mBAAW,EAAC;YAChB,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;YACtB,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;YACtB,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO;YAC1B,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS;YAC9B,MAAM,EAAE,aAAa,CAAC,MAAM;YAC5B,WAAW,EAAE,aAAa,CAAC,EAAE;YAC7B,cAAc,EAAE,aAAa,CAAC,KAAK;SACpC,CAAC,CAAC;IACL,CAAC;CACF;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import { insertEvent } from '../../../queries/event';\nimport { queryv2 } from '../../../utils/connector';\nimport logger from '../../../utils/logger';\nimport AccountManager from '../../managers/AccountManager';\nimport { EventData, ExtrinsicData } from '../../types';\n\nclass DefaultEvent {\n  id: number|undefined;\n\n  head: EventData;\n\n  signedData: any|undefined;\n\n  constructor(head: EventData) {\n    this.head = head;\n  }\n\n  private static async nextId(): Promise<number> {\n    const result = await queryv2<{nextval: string}>('SELECT nextval(\\'event_sequence\\');');\n    return parseInt(result[0].nextval, 10);\n  }\n\n  private static async idExists(id: number): Promise<boolean> {\n    const exist = await queryv2<{id: string}>('SELECT id FROM event WHERE id = $1', [id]);\n    return exist.length > 0;\n  }\n\n  private static async getId(): Promise<number> {\n    let id = await DefaultEvent.nextId();\n    while (await DefaultEvent.idExists(id)) {\n      id = await DefaultEvent.nextId();\n    }\n    return id;\n  }\n\n  async process(accountsManager: AccountManager): Promise<void> {\n    this.id = await DefaultEvent.getId();\n  }\n\n  async save(extrinsicData: ExtrinsicData): Promise<void> {\n    if (!this.id) {\n      throw new Error('Event id is not claimed!');\n    }\n    logger.info(`Inserting ${this.id} event`);\n\n    await insertEvent({\n      id: this.id,\n      index: this.head.index,\n      event: this.head.event,\n      blockId: this.head.blockId,\n      timestamp: this.head.timestamp,\n      status: extrinsicData.status,\n      extrinsicId: extrinsicData.id,\n      extrinsicIndex: extrinsicData.index,\n    });\n  }\n}\n\nexport default DefaultEvent;\n"]}