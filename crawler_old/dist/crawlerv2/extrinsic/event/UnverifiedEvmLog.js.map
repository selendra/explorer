{"version":3,"file":"UnverifiedEvmLog.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/UnverifiedEvmLog.ts"],"names":[],"mappings":";;;;;AACA,wDAAyD;AACzD,mEAA2C;AAC3C,gDAAyD;AAGzD,kEAA0C;AAE1C,MAAM,gBAAiB,SAAQ,sBAAY;IAA3C;;QACE,WAAM,GAA6B,KAAK,CAAC;QAEzC,SAAI,GAA8B,YAAY,CAAC;IAsCjD,CAAC;IAlCC,KAAK,CAAC,OAAO,CAAC,eAA+B;QAC3C,MAAM,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAErC,MAAM,SAAS,GAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAU,CAAC;QAC/D,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAiB,SAAS,CAAC,CAAC,CAAC,CAAC;QACpD,IAAI,EAAE,OAAO,EAAE,GAAiB,SAAS,CAAC,CAAC,CAAC,CAAC;QAC7C,OAAO,GAAG,IAAA,yBAAiB,EAAC,OAAO,CAAC,CAAC;QAErC,IAAI,CAAC,IAAI,GAAG;YACV,GAAG,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI;SAC7C,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,aAA4B;QACrC,MAAM,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;SACtC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;SACtF;QAED,gBAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACjC,MAAM,IAAA,uBAAY,EAAC,CAAC;gBAClB,GAAG,IAAI,CAAC,IAAI;gBACZ,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO;gBAC1B,OAAO,EAAE,IAAI,CAAC,EAAE;gBAChB,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;gBAC3B,cAAc,EAAE,aAAa,CAAC,KAAK;gBACnC,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO;gBACrE,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,CAAC,CAAC,CAAC;IACN,CAAC;CACF;AAED,kBAAe,gBAAgB,CAAC","sourcesContent":["import { BytecodeLog } from '../../../crawler/types';\nimport { insertEvmLog } from '../../../queries/evmEvent';\nimport logger from '../../../utils/logger';\nimport { toChecksumAddress } from '../../../utils/utils';\nimport AccountManager from '../../managers/AccountManager';\nimport { CompleteEvmData, ExtrinsicData } from '../../types';\nimport DefaultEvent from './DefaultEvent';\n\nclass UnverifiedEvmLog extends DefaultEvent {\n  method: 'Log' | 'ExecutedFailed' = 'Log';\n\n  type: 'Unverified' | 'Verified' = 'Unverified';\n\n  data: CompleteEvmData | undefined;\n\n  async process(accountsManager: AccountManager): Promise<void> {\n    await super.process(accountsManager);\n\n    const eventData = (this.head.event.event.data.toJSON() as any);\n    const { topics, data } : BytecodeLog = eventData[0];\n    let { address } : BytecodeLog = eventData[0];\n    address = toChecksumAddress(address);\n\n    this.data = {\n      raw: { address, topics, data }, parsed: null,\n    };\n  }\n\n  async save(extrinsicData: ExtrinsicData): Promise<void> {\n    await super.save(extrinsicData);\n    if (!this.id) {\n      throw new Error('Id is not claimed');\n    }\n    if (!this.data) {\n      throw new Error('Evm log data is not defined, call process function before saving!');\n    }\n\n    logger.info('Inserting evm log');\n    await insertEvmLog([{\n      ...this.data,\n      blockId: this.head.blockId,\n      eventId: this.id,\n      eventIndex: this.head.index,\n      extrinsicIndex: extrinsicData.index,\n      status: extrinsicData.status.type === 'success' ? 'Success' : 'Error',\n      type: this.type,\n      method: this.method,\n    }]);\n  }\n}\n\nexport default UnverifiedEvmLog;\n"]}