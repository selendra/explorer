{"version":3,"file":"CreateContractEvent.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/CreateContractEvent.ts"],"names":[],"mappings":"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","sourcesContent":["import { insertV2, nodeProvider } from '../../../utils/connector';\nimport logger from '../../../utils/logger';\nimport { ensure, toChecksumAddress } from '../../../utils/utils';\nimport AccountManager from '../../managers/AccountManager';\nimport { ExtrinsicData } from '../../types';\nimport DefaultEvent from './DefaultEvent';\n\nclass ContractCreateEvent extends DefaultEvent {\n  skip=false;\n\n  address?: string;\n\n  maintainer?: string;\n\n  static extistingContracts: Set<string> = new Set()\n\n  private static preprocessBytecode(bytecode: string) {\n    const start = bytecode.indexOf('6080604052');\n    const end = bytecode.indexOf('a265627a7a72315820') !== -1\n      ? bytecode.indexOf('a265627a7a72315820')\n      : bytecode.indexOf('a264697066735822');\n    return {\n      context: bytecode.slice(start, end),\n      args: bytecode.slice(end),\n    };\n  }\n\n  async process(accountsManager: AccountManager): Promise<void> {\n    await super.process(accountsManager);\n\n    const address = this.head.event.event.data.length > 1\n      // V9\n      ? this.head.event.event.data[1]\n      // V8\n      : this.head.event.event.data[0];\n\n    this.address = toChecksumAddress(address.toString());\n    if (ContractCreateEvent.extistingContracts.has(this.address)) {\n      this.skip = true;\n      return;\n    }\n    ContractCreateEvent.extistingContracts.add(this.address);\n    logger.info(`New contract created: \\n\\t -${this.address}`);\n\n    const contractData: any = (await nodeProvider.query((provider) => provider.api.query.evm.accounts(this.address))).toJSON();\n    this.maintainer = await accountsManager.useEvm(contractData.contractInfo.maintainer);\n  }\n\n  async save(extrinsicData: ExtrinsicData): Promise<void> {\n    await super.save(extrinsicData);\n\n    if (this.skip) { return; }\n\n    ensure(!!this.address, 'Contract address was unclaimed. Call process function before save');\n    ensure(!!this.maintainer, 'Contract maintainer was unclaimed. Call process function before save');\n\n    const bytecode = extrinsicData.args[0].toString();\n    const { context, args } = ContractCreateEvent.preprocessBytecode(bytecode);\n    const gasLimit = extrinsicData.args[2].toString();\n    const storageLimit = extrinsicData.args[3].toString();\n    logger.info('Inserting contract');\n\n    await insertV2(\n      `\n    INSERT INTO contract\n      (address, extrinsic_id, signer, bytecode, bytecode_context, bytecode_arguments, gas_limit, storage_limit, timestamp)\n    VALUES\n      %L\n    ON CONFLICT (address) DO NOTHING;`,\n      [[this.address, extrinsicData.id, this.maintainer, bytecode, context, args, gasLimit, storageLimit, this.head.timestamp]],\n    );\n  }\n}\n\nexport default ContractCreateEvent;\n"]}