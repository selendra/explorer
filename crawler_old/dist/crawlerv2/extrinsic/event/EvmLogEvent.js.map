{"version":3,"file":"EvmLogEvent.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/EvmLogEvent.ts"],"names":[],"mappings":";;;;;AAAA,mCAA+B;AAE/B,mEAA2C;AAC3C,gDAAyD;AAGzD,0EAAkD;AAElD,MAAM,WAAY,SAAQ,0BAAgB;IAGxC,YAAY,IAAe,EAAE,QAA0B;QACrD,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,eAA+B;QAC3C,MAAM,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAErC,MAAM,SAAS,GAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAU,CAAC;QAC/D,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAiB,SAAS,CAAC,CAAC,CAAC,CAAC;QACpD,IAAI,EAAE,OAAO,EAAE,GAAiB,SAAS,CAAC,CAAC,CAAC,CAAC;QAC7C,OAAO,GAAG,IAAA,yBAAiB,EAAC,OAAO,CAAC,CAAC;QAErC,IAAI,CAAC,IAAI,GAAG;YACV,GAAG,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI;SAC7C,CAAC;QACF,MAAM,EAAE,aAAa,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9C,IAAI;YACF,MAAM,KAAK,GAAG,IAAI,cAAK,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;YACpD,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;SACxB;QAAC,OAAO,CAAC,EAAE;YACV,gBAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;SACnD;IACH,CAAC;CACF;AAED,kBAAe,WAAW,CAAC","sourcesContent":["import { utils } from 'ethers';\nimport { BytecodeLog, VerifiedContract } from '../../../crawler/types';\nimport logger from '../../../utils/logger';\nimport { toChecksumAddress } from '../../../utils/utils';\nimport AccountManager from '../../managers/AccountManager';\nimport { EventData } from '../../types';\nimport UnverifiedEvmLog from './UnverifiedEvmLog';\n\nclass EvmLogEvent extends UnverifiedEvmLog {\n  contract: VerifiedContract;\n\n  constructor(head: EventData, contract: VerifiedContract) {\n    super(head);\n    this.contract = contract;\n  }\n\n  async process(accountsManager: AccountManager): Promise<void> {\n    await super.process(accountsManager);\n\n    const eventData = (this.head.event.event.data.toJSON() as any);\n    const { topics, data } : BytecodeLog = eventData[0];\n    let { address } : BytecodeLog = eventData[0];\n    address = toChecksumAddress(address);\n\n    this.data = {\n      raw: { address, topics, data }, parsed: null,\n    };\n    const { compiled_data, name } = this.contract;\n    try {\n      const iface = new utils.Interface(compiled_data[name]);\n      this.data.parsed = iface.parseLog({ topics, data });\n      this.type = 'Verified';\n    } catch (e) {\n      logger.warn('Contract event was not compiled...');\n    }\n  }\n}\n\nexport default EvmLogEvent;\n"]}