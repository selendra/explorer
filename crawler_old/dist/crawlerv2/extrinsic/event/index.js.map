{"version":3,"file":"index.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { utils } from 'ethers';\nimport { BytecodeLog } from '../../../crawler/types';\nimport { getContractDB } from '../../../queries/evmEvent';\nimport { toChecksumAddress } from '../../../utils/utils';\nimport { EventData } from '../../types';\nimport ClaimEvmAccountEvent from './ClaimEvmAccountEvent';\nimport ContractCreateEvent from './CreateContractEvent';\nimport DefaultEvent from './DefaultEvent';\nimport EndowedEvent from './EndowedEvent';\nimport EvmLogEvent from './EvmLogEvent';\nimport ExecutedFailedEvent from './ExecutedFailedEvent';\nimport KillAccountEvent from './KillAccountEvent';\nimport ReservedEvent from './ReservedEvent';\nimport StakingEvent from './StakingEvent';\nimport Erc1155BatchTransferEvent from './transfer/Erc1155BatchTransferEvent';\nimport Erc1155SingleTransferEvent from './transfer/Erc1155SingleTransferEvent';\nimport Erc20TransferEvent from './transfer/Erc20TransferEvent';\nimport Erc721TransferEvent from './transfer/Erc721TransferEvent';\nimport NativeTransferEvent from './transfer/NativeTransferEvent';\nimport UnverifiedEvmLog from './UnverifiedEvmLog';\nimport UnverifiedExecutedFailedEvent from './UnverifiedExecutedFailedEvent';\n\nconst selectEvmLogEvent = async (head: EventData): Promise<UnverifiedEvmLog> => {\n  const contractData: BytecodeLog = (head.event.event.data.toJSON() as any)[0];\n  // Retrieving contract data from db\n  const contract = await getContractDB(toChecksumAddress(contractData.address));\n\n  // If contract does not exist we can not verified evm log content\n  // therefore log is marked as unverified\n  if (contract.length === 0) return new UnverifiedEvmLog(head);\n\n  // Decoding contract event\n  const { type, compiled_data, name } = contract[0];\n  const abi = new utils.Interface(compiled_data[name]);\n  const decodedEvent = abi.parseLog(contractData);\n  const eventName = `${decodedEvent.name}.${type}`;\n\n  // Handling transfer events\n  switch (eventName) {\n    case 'Transfer.ERC20':\n      return new Erc20TransferEvent(head, contract[0]);\n    case 'Transfer.ERC721':\n      return new Erc721TransferEvent(head, contract[0]);\n    case 'TransferSingle.ERC1155':\n      return new Erc1155SingleTransferEvent(head, contract[0]);\n    case 'TransferBatch.ERC1155':\n      return new Erc1155BatchTransferEvent(head, contract[0]);\n    default:\n      return new EvmLogEvent(head, contract[0]);\n  }\n};\n\nconst selectExecutionFailedEvent = async (head: EventData): Promise<DefaultEvent> => {\n  const contractData: BytecodeLog = (head.event.event.data.toJSON() as any)[0];\n\n  // Retrieving contract data from db\n  const contract = await getContractDB(toChecksumAddress(contractData.address));\n\n  // If contract does not exist we can not verified evm execution failed content\n  if (contract.length === 0) return new UnverifiedExecutedFailedEvent(head);\n\n  return new ExecutedFailedEvent(head, contract[0]);\n};\n\nconst resolveEvent = async (\n  head: EventData,\n): Promise<DefaultEvent> => {\n  // Compressing event section and method\n  const eventCompression = `${head.event.event.section.toString()}.${head.event.event.method.toString()}`;\n\n  // Decoding native events\n  switch (eventCompression) {\n    case 'evm.Log': return selectEvmLogEvent(head);\n    case 'evm.ExecutedFailed': return selectExecutionFailedEvent(head);\n    case 'evm.Created': return new ContractCreateEvent(head);\n\n    case 'evmAccounts.ClaimAccount': return new ClaimEvmAccountEvent(head);\n\n    case 'balances.Endowed': return new EndowedEvent(head);\n    case 'balances.Reserved': return new ReservedEvent(head);\n    case 'balances.Transfer': return new NativeTransferEvent(head);\n\n    case 'staking.Rewarded': return new StakingEvent(head);\n\n    case 'system.KilledAccount': return new KillAccountEvent(head);\n\n    default: return new DefaultEvent(head);\n  }\n};\n\nexport default resolveEvent;\n"]}