{"version":3,"file":"StakingEvent.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/StakingEvent.ts"],"names":[],"mappings":";;;;;AAAA,wDAAiE;AACjE,mEAA2C;AAG3C,kEAA0C;AAE1C,MAAM,YAAa,SAAQ,sBAAY;IAAvC;;QACE,WAAM,GAAW,EAAE,CAAC;QAEpB,WAAM,GAAW,GAAG,CAAC;IA4CvB,CAAC;IA1CC,KAAK,CAAC,OAAO,CAAC,eAA+B;QAC3C,MAAM,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAErC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QACvD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAEvD,6BAA6B;QAC7B,MAAM,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEvC,sEAAsE;QACtE,MAAM,SAAS,GAAG,MAAM,wBAAY,CAAC,KAAK,CACxC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CACrE,CAAC;QACF,oEAAoE;QACpE,MAAM,iBAAiB,GAAG,MAAM,wBAAY,CAAC,KAAK,CAChD,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAC1E,CAAC;QAEF,iGAAiG;QACjG,IAAI,iBAAiB,CAAC,SAAS,EAAE;YAC/B,gBAAM,CAAC,IAAI,CAAC,qCAAqC,IAAI,CAAC,MAAM,QAAQ,iBAAiB,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC9G,IAAI,CAAC,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;YAErD,8BAA8B;YAC9B,MAAM,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACxC;IACH,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,aAA4B;QACrC,uBAAuB;QACvB,MAAM,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEhC,2BAA2B;QAC3B,gBAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACvC,MAAM,IAAA,mBAAO,EACX;;;6BAGuB,EACvB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CACnE,CAAC;IACJ,CAAC;CACF;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import { nodeProvider, queryv2 } from '../../../utils/connector';\nimport logger from '../../../utils/logger';\nimport AccountManager from '../../managers/AccountManager';\nimport { ExtrinsicData } from '../../types';\nimport DefaultEvent from './DefaultEvent';\n\nclass StakingEvent extends DefaultEvent {\n  signer: string = '';\n\n  amount: string = '0';\n\n  async process(accountsManager: AccountManager): Promise<void> {\n    await super.process(accountsManager);\n\n    this.signer = this.head.event.event.data[0].toString();\n    this.amount = this.head.event.event.data[1].toString();\n\n    // Marking controller account\n    await accountsManager.use(this.signer);\n\n    // Retrieving block hash to extract correct reward destination mapping\n    const blockHash = await nodeProvider.query(\n      (provider) => provider.api.rpc.chain.getBlockHash(this.head.blockId),\n    );\n    // Retrieving reward destination mapping for specific block and user\n    const rewardDestination = await nodeProvider.query(\n      (provider) => provider.api.query.staking.payee.at(blockHash, this.signer),\n    );\n\n    // If account has speficied different reward destination we switch the staking signer to that one\n    if (rewardDestination.isAccount) {\n      logger.info(`Redirecting staking rewards from: ${this.signer} to: ${rewardDestination.asAccount.toString()}`);\n      this.signer = rewardDestination.asAccount.toString();\n\n      // Marking destination account\n      await accountsManager.use(this.signer);\n    }\n  }\n\n  async save(extrinsicData: ExtrinsicData): Promise<void> {\n    // Saving default event\n    await super.save(extrinsicData);\n\n    // Saving processed staking\n    logger.info('Inserting staking event');\n    await queryv2(\n      `INSERT INTO staking\n        (event_id, signer, amount, type, timestamp)\n      VALUES\n        ($1, $2, $3, $4, $5)`,\n      [this.id, this.signer, this.amount, 'Reward', this.head.timestamp],\n    );\n  }\n}\n\nexport default StakingEvent;\n"]}