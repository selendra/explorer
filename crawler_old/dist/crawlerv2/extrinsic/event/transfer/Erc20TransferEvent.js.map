{"version":3,"file":"Erc20TransferEvent.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/transfer/Erc20TransferEvent.ts"],"names":[],"mappings":"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","sourcesContent":["import { TokenHolder } from '../../../../crawler/types';\nimport { balanceOf } from '../../../../crawler/utils';\nimport { insertAccountTokenHolders } from '../../../../queries/tokenHoldes';\nimport logger from '../../../../utils/logger';\nimport { dropDuplicatesMultiKey } from '../../../../utils/utils';\nimport AccountManager from '../../../managers/AccountManager';\nimport { ExtrinsicData } from '../../../types';\nimport DefaultErcTransferEvent from './DefaultErcTransferEvent';\n\nclass Erc20TransferEvent extends DefaultErcTransferEvent {\n  accountTokenHolders: TokenHolder[] = [];\n\n  contractTokenHolders: TokenHolder[] = [];\n\n  async process(accountsManager: AccountManager): Promise<void> {\n    await super.process(accountsManager);\n    logger.info('Processing Erc20 transfer event');\n\n    const [from, to, amount] = this.data!.parsed.args;\n    const toEvmAddress = to.toString();\n    const fromEvmAddress = from.toString();\n    const tokenAddress = this.contract.address;\n    const abi = this.contract.compiled_data[this.contract.name];\n\n    // Resolving accounts\n    const toAddress = await accountsManager.useEvm(toEvmAddress);\n    const fromAddress = await accountsManager.useEvm(fromEvmAddress);\n\n    logger.info(`Processing ERC20: ${this.contract.address} transfer from ${fromAddress} to ${toAddress} -> ${amount.toString()}`);\n    this.transfers.push({\n      type: 'ERC20',\n      toEvmAddress,\n      tokenAddress,\n      fromEvmAddress,\n      blockId: this.head.blockId,\n      timestamp: this.head.timestamp,\n      amount: amount.toString(),\n      denom: this.contract.contract_data?.symbol,\n      toAddress,\n      fromAddress,\n    });\n\n    if (toAddress !== '0x') {\n      const toBalance = await balanceOf(toEvmAddress, tokenAddress, abi);\n      this.addTokenHolder(\n        toAddress,\n        toEvmAddress,\n        toBalance,\n      );\n    }\n\n    if (fromAddress !== '0x') {\n      const fromBalance = await balanceOf(fromEvmAddress, tokenAddress, abi);\n      this.addTokenHolder(\n        fromAddress,\n        fromEvmAddress,\n        fromBalance,\n      );\n    }\n  }\n\n  async save(extrinsicData: ExtrinsicData): Promise<void> {\n    await super.save(extrinsicData);\n    const accounts = dropDuplicatesMultiKey(this.accountTokenHolders, ['tokenAddress', 'signerAddress']);\n    const contracts = dropDuplicatesMultiKey(this.accountTokenHolders, ['tokenAddress', 'evmAddress']);\n    // Saving account token holders and displaying updated holders and signers\n    if (accounts.length > 0) {\n      logger.info(\n        `Updating account token holders for (tokenAddress, signer): \\n\\t- ${accounts\n          .map(({ signerAddress, tokenAddress }) => `(${tokenAddress}, ${signerAddress})`)\n          .join(',\\n\\t- ')}`,\n      );\n      await insertAccountTokenHolders(accounts);\n    }\n\n    // Saving account token holders and displaying updated holders and signers\n    if (contracts.length > 0) {\n      logger.info(\n        `Updating contract token holders for (tokenAddress, contract): \\n\\t- ${contracts\n          .map(({ evmAddress, tokenAddress }) => `(${tokenAddress}, ${evmAddress})`)\n          .join(',\\n\\t- ')}`,\n      );\n      await insertAccountTokenHolders(contracts);\n    }\n  }\n}\n\nexport default Erc20TransferEvent;\n"]}