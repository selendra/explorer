{"version":3,"file":"NftTokenHolderEvent.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/transfer/NftTokenHolderEvent.ts"],"names":[],"mappings":";;;;;AACA,iEAAoG;AACpG,sEAA8C;AAC9C,mDAAiE;AAEjE,wFAAgE;AAEhE,MAAM,mBAAoB,SAAQ,iCAAuB;IAAzD;;QACE,SAAI,GAAc,SAAS,CAAC;IA0B9B,CAAC;IAxBC,KAAK,CAAC,IAAI,CAAC,aAA4B;QACrC,MAAM,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAChC,wEAAwE;QACxE,MAAM,QAAQ,GAAG,IAAA,8BAAsB,EAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,eAAe,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;QAC9G,MAAM,SAAS,GAAG,IAAA,8BAAsB,EAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,YAAY,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7G,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,gBAAM,CAAC,IAAI,CACT,oBAAoB,IAAI,CAAC,IAAI,8CAA8C,QAAQ;iBAChF,GAAG,CAAC,CAAC,EAAE,aAAa,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,IAAI,YAAY,KAAK,aAAa,GAAG,CAAC;iBAC/E,IAAI,CAAC,SAAS,CAAC,EAAE,CACrB,CAAC;YACF,MAAM,IAAA,qCAAuB,EAAC,QAAQ,CAAC,CAAC;SACzC;QAED,wEAAwE;QACxE,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,gBAAM,CAAC,IAAI,CACT,qBAAqB,IAAI,CAAC,IAAI,gDAAgD,SAAS;iBACpF,GAAG,CAAC,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,IAAI,YAAY,KAAK,UAAU,GAAG,CAAC;iBACzE,IAAI,CAAC,SAAS,CAAC,EAAE,CACrB,CAAC;YACF,MAAM,IAAA,sCAAwB,EAAC,SAAS,CAAC,CAAC;SAC3C;IACH,CAAC;CACF;AAED,kBAAe,mBAAmB,CAAC","sourcesContent":["import { TokenType } from '../../../../crawler/types';\nimport { insertAccountNftHolders, insertContractNftHolders } from '../../../../queries/tokenHoldes';\nimport logger from '../../../../utils/logger';\nimport { dropDuplicatesMultiKey } from '../../../../utils/utils';\nimport { ExtrinsicData } from '../../../types';\nimport DefaultErcTransferEvent from './DefaultErcTransferEvent';\n\nclass NftTokenHolderEvent extends DefaultErcTransferEvent {\n  name: TokenType = 'ERC1155';\n\n  async save(extrinsicData: ExtrinsicData): Promise<void> {\n    await super.save(extrinsicData);\n    // Saving account nft holders and displaying updated holders and signers\n    const accounts = dropDuplicatesMultiKey(this.accountTokenHolders, ['signerAddress', 'tokenAddress', 'nftId']);\n    const contracts = dropDuplicatesMultiKey(this.contractTokenHolders, ['evmAddress', 'tokenAddress', 'nftId']);\n    if (accounts.length > 0) {\n      logger.info(\n        `Updating account ${this.name} holders for (tokenAddress, signer): \\n\\t- ${accounts\n          .map(({ signerAddress, tokenAddress }) => `(${tokenAddress}, ${signerAddress})`)\n          .join(',\\n\\t- ')}`,\n      );\n      await insertAccountNftHolders(accounts);\n    }\n\n    // Saving account nft holders and displaying updated holders and signers\n    if (contracts.length > 0) {\n      logger.info(\n        `Updating contract ${this.name} holders for (tokenAddress, contract): \\n\\t- ${contracts\n          .map(({ evmAddress, tokenAddress }) => `(${tokenAddress}, ${evmAddress})`)\n          .join(',\\n\\t- ')}`,\n      );\n      await insertContractNftHolders(contracts);\n    }\n  }\n}\n\nexport default NftTokenHolderEvent;\n"]}