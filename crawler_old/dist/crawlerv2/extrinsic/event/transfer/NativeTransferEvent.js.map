{"version":3,"file":"NativeTransferEvent.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/transfer/NativeTransferEvent.ts"],"names":[],"mappings":"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","sourcesContent":["import { BigNumber } from 'ethers';\nimport { insertTransfers } from '../../../../queries/extrinsic';\nimport { nodeProvider } from '../../../../utils/connector';\nimport logger from '../../../../utils/logger';\nimport { SELENDRA_CONTRACT_ADDRESS } from '../../../../utils/utils';\nimport AccountManager from '../../../managers/AccountManager';\nimport { ExtrinsicData } from '../../../types';\nimport DefaultEvent from '../DefaultEvent';\n\nclass NativeTransferEvent extends DefaultEvent {\n  to: string = '';\n\n  from: string = '';\n\n  toEvm: string = '';\n\n  fromEvm: string = '';\n\n  amount: string = '';\n\n  async process(accountsManager: AccountManager): Promise<void> {\n    await super.process(accountsManager);\n\n    const [fromAddress, toAddress, amount] = this.head.event.event.data;\n    const [toEvmAddress, fromEvmAddress] = await Promise.all([\n      nodeProvider.query((provider) => provider.api.query.evmAccounts.evmAddresses(toAddress)),\n      nodeProvider.query((provider) => provider.api.query.evmAccounts.evmAddresses(fromAddress)),\n    ]);\n\n    this.amount = amount.toString();\n\n    this.to = toAddress.toString();\n    this.from = fromAddress.toString();\n    this.toEvm = toEvmAddress.toString();\n    this.fromEvm = fromEvmAddress.toString();\n\n    logger.info(`Processing native transfer from ${fromAddress} to ${toAddress} -> ${this.amount} SEL`);\n    await accountsManager.use(this.to);\n    await accountsManager.use(this.from);\n  }\n\n  async save(extrinsicData: ExtrinsicData): Promise<void> {\n    await super.save(extrinsicData);\n\n    logger.info('Inserting transfer');\n    await insertTransfers([{\n      denom: 'SEL',\n      type: 'Native',\n      amount: this.amount,\n      toAddress: this.to,\n      fromAddress: this.from,\n      toEvmAddress: this.toEvm,\n      blockId: this.head.blockId,\n      fromEvmAddress: this.fromEvm,\n      timestamp: this.head.timestamp,\n      extrinsicId: extrinsicData.id,\n      tokenAddress: SELENDRA_CONTRACT_ADDRESS,\n      success: extrinsicData.status.type === 'success',\n      feeAmount: BigNumber.from(extrinsicData.signedData!.fee.partialFee).toString(),\n      errorMessage: extrinsicData.status.type === 'error' ? extrinsicData.status.message : '',\n    }]);\n  }\n}\n\nexport default NativeTransferEvent;\n"]}