{"version":3,"file":"DefaultErcTransferEvent.js","sourceRoot":"/","sources":["crawlerv2/extrinsic/event/transfer/DefaultErcTransferEvent.ts"],"names":[],"mappings":";;;;;AAAA,mCAAmC;AAEnC,6DAAgE;AAChE,sEAA8C;AAE9C,iEAAyC;AAEzC,MAAM,uBAAwB,SAAQ,qBAAW;IAAjD;;QACE,cAAS,GAAe,EAAE,CAAC;QAE3B,wBAAmB,GAAkB,EAAE,CAAC;QAExC,yBAAoB,GAAkB,EAAE,CAAC;IA0C3C,CAAC;IAxCC,cAAc,CACZ,OAAe,EACf,UAAkB,EAClB,OAAe,EACf,QAAoB,IAAI;QAExB,IAAI,OAAO,KAAK,IAAI,EAAE;YAAE,OAAO;SAAE;QAEjC,4BAA4B;QAC5B,MAAM,WAAW,GAAgB;YAC/B,KAAK;YACL,OAAO;YACP,UAAU,EAAE,OAAO,KAAK,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;YAC5C,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS;YAC9B,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa;YACjC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;YACnC,IAAI,EAAE,OAAO,KAAK,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS;YAC7C,aAAa,EAAE,OAAO;SACvB,CAAC;QAEF,yEAAyE;QACzE,IAAI,WAAW,CAAC,IAAI,KAAK,SAAS,EAAE;YAClC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC5C;aAAM;YACL,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC7C;IACH,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,aAA4B;QACrC,MAAM,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEhC,gBAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACvC,MAAM,IAAA,2BAAe,EAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACtD,GAAG,QAAQ;YACX,OAAO,EAAE,IAAI;YACb,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,aAAa,CAAC,EAAE;YAC7B,SAAS,EAAE,kBAAS,CAAC,IAAI,CAAC,aAAa,CAAC,UAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE;SAC/E,CAAC,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["import { BigNumber } from 'ethers';\nimport { TokenHolder } from '../../../../crawler/types';\nimport { insertTransfers } from '../../../../queries/extrinsic';\nimport logger from '../../../../utils/logger';\nimport { ExtrinsicData, Transfer } from '../../../types';\nimport EvmLogEvent from '../EvmLogEvent';\n\nclass DefaultErcTransferEvent extends EvmLogEvent {\n  transfers: Transfer[] = [];\n\n  accountTokenHolders: TokenHolder[] = [];\n\n  contractTokenHolders: TokenHolder[] = [];\n\n  addTokenHolder(\n    address: string,\n    evmAddress: string,\n    balance: string,\n    nftId:string|null = null,\n  ) {\n    if (address === '0x') { return; }\n\n    // Creating new token holder\n    const tokenHolder: TokenHolder = {\n      nftId,\n      balance,\n      evmAddress: address === '' ? evmAddress : '',\n      timestamp: this.head.timestamp,\n      info: this.contract.contract_data,\n      tokenAddress: this.contract.address,\n      type: address === '' ? 'Contract' : 'Account',\n      signerAddress: address,\n    };\n\n    // Based on reciever type (contract/account) we extend holder accordingly\n    if (tokenHolder.type === 'Account') {\n      this.accountTokenHolders.push(tokenHolder);\n    } else {\n      this.contractTokenHolders.push(tokenHolder);\n    }\n  }\n\n  async save(extrinsicData: ExtrinsicData): Promise<void> {\n    await super.save(extrinsicData);\n\n    logger.info('Inserting Erc transfers');\n    await insertTransfers(this.transfers.map((transfer) => ({\n      ...transfer,\n      success: true,\n      errorMessage: '',\n      extrinsicId: extrinsicData.id,\n      feeAmount: BigNumber.from(extrinsicData.signedData!.fee.partialFee).toString(),\n    })));\n  }\n}\n\nexport default DefaultErcTransferEvent;\n"]}