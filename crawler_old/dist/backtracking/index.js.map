{"version":3,"file":"index.js","sourceRoot":"/","sources":["backtracking/index.ts"],"names":[],"mappings":";;;;;AAAA,mCAA+B;AAE/B,kDAAqE;AACrE,kDAA6C;AAC7C,kDAA4D;AAC5D,wDAAgE;AAChE,oDAAuD;AACvD,yEAAwD;AACxD,6DAAqC;AAErC,kBAAe,KAAK,EAAE,eAAuB,EAAE,EAAE;IAC/C,gBAAM,CAAC,IAAI,CAAC,yBAAyB,eAAe,wBAAwB,CAAC,CAAC;IAC9E,MAAM,SAAS,GAAG,MAAM,IAAA,mBAAO,EAAuB;;;;;;;;;+DASO,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;IAElF,gBAAM,CAAC,IAAI,CAAC,cAAc,SAAS,CAAC,MAAM,wBAAwB,CAAC,CAAC;IACpE,MAAM,QAAQ,GAAG,MAAM,IAAA,wBAAa,EAAC,eAAe,CAAC,CAAC;IAEtD,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,qBAAqB,eAAe,wCAAwC,CAAC,CAAC;KAC/F;IAED,MAAM,EACJ,aAAa,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,YAAY,GAC9E,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAChB,MAAM,iBAAiB,GAAG,IAAI,cAAK,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAElE,MAAM,aAAa,GAA2B,SAAS;SACpD,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,KAAK,KAAK,CAAC;SACxC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAClB,GAAG,QAAQ;QACX,UAAU,EAAE,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;QACxD,IAAI,EAAE,UAAU;KACjB,CAAC,CAAC,CAAC;IAEN,MAAM,OAAO,GAA6B,aAAa;SACpD,GAAG,CAAC,CAAC,EACJ,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,GACjE,EAAE,EAAE,CAAC,CAAC;QACL,IAAI;QACJ,IAAI;QACJ,OAAO,EAAE,OAAO;QAChB,OAAO;QACP,SAAS;QACT,UAAU,EAAE,UAAU;QACtB,WAAW,EAAE,WAAW;QACxB,YAAY;QACZ,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,OAAO,CAAC,IAAI;QAClB,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,YAAY,EAAE,UAAU;QACxB,GAAG,EAAE,UAAU;KAChB,CAAC,CAAC,CAAC;IAEN,gBAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IAC1C,MAAM,SAAS,GAAG,MAAM,IAAA,gCAAqB,EAAC,OAAO,CAAC,CAAC;IACvD,gBAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;IAC9C,MAAM,YAAY,GAAG,MAAM,IAAA,oCAAsB,EAAC,OAAO,CAAC,CAAC;IAE3D,gBAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACnC,MAAM,IAAA,2BAAe,EAAC,SAAS,CAAC,CAAC;IACjC,gBAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACvC,MAAM,IAAA,qBAAkB,EAAC,YAAY,CAAC,CAAC;IACvC,gBAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;IACpD,MAAM,IAAA,0BAAe,EAAC,aAAa,CAAC,CAAC;AACvC,CAAC,CAAC","sourcesContent":["import { utils } from 'ethers';\nimport { BacktrackingEvmEvent, EvmLogWithDecodedEvent } from '../crawler/types';\nimport { getContractDB, updateEvmEvents } from '../queries/evmEvent';\nimport { queryv2 } from '../utils/connector';\nimport { processTokenTransfers } from '../crawler/transfer';\nimport { processEvmTokenHolders } from '../crawler/tokenHolder';\nimport { insertTransfers } from '../queries/extrinsic';\nimport insertTokenHolders from '../queries/tokenHoldes';\nimport logger from '../utils/logger';\n\nexport default async (contractAddress: string) => {\n  logger.info(`Retrieving Contracts: ${contractAddress} unverified evm events`);\n  const evmEvents = await queryv2<BacktrackingEvmEvent>(`SELECT\n      ee.id, ee.event_id as eventId, ee.block_id as blockId, ev.extrinsic_id as extrinsicId, ee.event_index as eventIndex, \n      ee.extrinsic_index as extrinsicIndex, ee.contract_address as contractAddress, ee.data_raw as rawData, ee.method,\n      ee.type, ee.status, ex.timestamp as timestamp, ex.signed_data as signedData\n    FROM evm_event as ee\n    JOIN event as ev\n      ON ev.id = ee.event_id\n    JOIN extrinsic as ex\n      ON ev.extrinsic_id = ex.id\n    WHERE ee.contract_address = $1 AND ee.type = 'Unverified';`, [contractAddress]);\n\n  logger.info(`There were ${evmEvents.length} unverified evm events`);\n  const contract = await getContractDB(contractAddress);\n\n  if (contract.length <= 0) {\n    throw new Error(`Contract address: ${contractAddress} was not found in verified contract...`);\n  }\n\n  const {\n    compiled_data: compiledData, name, address, type, contract_data: contractData,\n  } = contract[0];\n  const contractInterface = new utils.Interface(compiledData[name]);\n\n  const processedLogs: BacktrackingEvmEvent[] = evmEvents\n    .filter(({ method }) => method === 'Log')\n    .map((evmEvent) => ({\n      ...evmEvent,\n      parseddata: contractInterface.parseLog(evmEvent.rawdata),\n      type: 'Verified',\n    }));\n\n  const evmLogs: EvmLogWithDecodedEvent[] = processedLogs\n    .map(({\n      timestamp, blockid, rawdata, extrinsicid, signeddata, parseddata,\n    }) => ({\n      name,\n      type,\n      blockId: blockid,\n      address,\n      timestamp,\n      signedData: signeddata,\n      extrinsicId: extrinsicid,\n      contractData,\n      abis: compiledData,\n      data: rawdata.data,\n      topics: rawdata.topics,\n      decodedEvent: parseddata,\n      fee: signeddata,\n    }));\n\n  logger.info('Processing transfer events');\n  const transfers = await processTokenTransfers(evmLogs);\n  logger.info('Processing token-holder events');\n  const tokenHolders = await processEvmTokenHolders(evmLogs);\n\n  logger.info('Inserting Transfers');\n  await insertTransfers(transfers);\n  logger.info('Inserting Token holders');\n  await insertTokenHolders(tokenHolders);\n  logger.info('Updating evm events with parsed data');\n  await updateEvmEvents(processedLogs);\n};\n"]}