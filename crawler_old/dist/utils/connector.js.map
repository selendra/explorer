{"version":3,"file":"connector.js","sourceRoot":"/","sources":["utils/connector.ts"],"names":[],"mappings":";;;;;;AAAA,2BAA0B;AAC1B,0DAA+B;AAC/B,8CAAyF;AACzF,uDAAmC;AACnC,kEAA0C;AAC1C,gCAA8B;AAE9B,MAAM,UAAU,GAAS,IAAI,SAAI,CAAC,EAAE,GAAG,gBAAU,CAAC,cAAc,EAAE,CAAC,CAAC;AACvD,QAAA,YAAY,GAAG,IAAI,sBAAY,CAAC,gBAAU,CAAC,QAAQ,CAAC,CAAC;AAGrD,QAAA,iBAAiB,GAAkB,IAAI,mBAAY,CAAC;IAC/D,GAAG,EAAE,gBAAU,CAAC,cAAc;IAC9B,KAAK,EAAE,IAAI,oBAAa,EAAE;CAC3B,CAAC,CAAC;AAEI,MAAM,MAAM,GAAG,KAAK,EAAE,SAAiB,EAAiB,EAAE;IAC/D,MAAM,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACpC,CAAC,CAAC;AAFW,QAAA,MAAM,UAEjB;AAEK,MAAM,QAAQ,GAAG,KAAK,EAAE,SAAiB,EAAE,IAAW,EAAE,EAAE;IAC/D,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QAAE,OAAO;KAAE;IAClC,MAAM,UAAU,CAAC,KAAK,CAAC,IAAA,mBAAM,EAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC;AAHW,QAAA,QAAQ,YAGnB;AAEK,MAAM,KAAK,GAAG,KAAK,EAAS,SAAiB,EAAkB,EAAE;IACtE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC;IAC1C,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAM,SAAS,CAAC,CAAC;IAClD,MAAM,CAAC,OAAO,EAAE,CAAC;IACjB,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC,CAAC;AALW,QAAA,KAAK,SAKhB;AAEK,MAAM,OAAO,GAAG,KAAK,EAAS,SAAiB,EAAE,OAAO,EAAW,EAAkB,EAAE;IAC5F,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC;IAC1C,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAM,SAAS,EAAE,IAAI,CAAC,CAAC;IACxD,MAAM,CAAC,OAAO,EAAE,CAAC;IACjB,OAAO,MAAM,CAAC,IAAI,CAAC;AACrB,CAAC,CAAC;AALW,QAAA,OAAO,WAKlB","sourcesContent":["import { Pool } from 'pg';\nimport format from 'pg-format';\nimport { ApolloClient, InMemoryCache, NormalizedCacheObject } from '@apollo/client/core';\nimport APP_CONFIG from '../config';\nimport NodeProvider from './NodeProvider';\nimport 'cross-fetch/polyfill';\n\nconst dbProvider: Pool = new Pool({ ...APP_CONFIG.postgresConfig });\nexport const nodeProvider = new NodeProvider(APP_CONFIG.nodeUrls);\n\nexport type GraphqlServer = ApolloClient<NormalizedCacheObject>;\nexport const liveGraphqlServer: GraphqlServer = new ApolloClient({\n  uri: APP_CONFIG.liveGraphqlUrl,\n  cache: new InMemoryCache(),\n});\n\nexport const insert = async (statement: string): Promise<void> => {\n  await dbProvider.query(statement);\n};\n\nexport const insertV2 = async (statement: string, args: any[]) => {\n  if (args.length === 0) { return; }\n  await dbProvider.query(format(statement, args));\n};\n\nexport const query = async <Res, >(statement: string): Promise<Res[]> => {\n  const client = await dbProvider.connect();\n  const result = await client.query<Res>(statement);\n  client.release();\n  return result.rows;\n};\n\nexport const queryv2 = async <Res, >(statement: string, args = [] as any[]): Promise<Res[]> => {\n  const client = await dbProvider.connect();\n  const result = await client.query<Res>(statement, args);\n  client.release();\n  return result.rows;\n};\n"]}