{"version":3,"file":"NodeProvider.js","sourceRoot":"/","sources":["utils/NodeProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Provider } from '@selendra/selendra_evm';\nimport { WsProvider } from '@polkadot/api';\nimport { max, wait } from './utils';\nimport logger from './logger';\n\nexport default class NodeProvider {\n  private urls: string[];\n\n  private dbBlockId = -1;\n\n  private currentProvider = 0;\n\n  private providers: Provider[] = [];\n\n  private lastBlockIds: number[] = [];\n\n  private lastFinalizedBlockIds: number[] = [];\n\n  constructor(urls: string[]) {\n    this.urls = [...urls];\n  }\n\n  setDbBlockId(id: number) {\n    this.dbBlockId = id;\n  }\n\n  lastBlockId() {\n    return max(...this.lastBlockIds);\n  }\n\n  lastFinalizedBlockId() {\n    return max(...this.lastFinalizedBlockIds);\n  }\n\n  getProvider() {\n    if (this.providers.length === 0) {\n      throw new Error('Initialize providers! Non was detected');\n    }\n    const pointer = this.currentProvider;\n    this.currentProvider = (this.currentProvider + 1) % this.providers.length;\n    return this.providers[pointer];\n  }\n\n  /* eslint \"no-unused-vars\": \"off\" */\n  async query<T>(fun: (provider: Provider) => Promise<T>): Promise<T> {\n    this.currentProvider = (this.currentProvider + 1) % this.providers.length;\n    while (this.lastBlockIds[this.currentProvider] < this.dbBlockId) {\n      this.currentProvider = (this.currentProvider + 1) % this.providers.length;\n    }\n    const providerPointer = this.providers[this.currentProvider];\n    return fun(providerPointer);\n  }\n\n  async initializeProviders(): Promise<void> {\n    logger.info('Connecting to nodes...');\n    await this.initializeNodeProviders();\n    logger.info('... connected');\n    logger.info('Syncing node...');\n    await this.syncNode();\n    logger.info('Syncing complete');\n  }\n\n  async closeProviders(): Promise<void> {\n    logger.info('Closing providers');\n\n    for (let index = 0; index < this.providers.length; index += 1) {\n      await this.providers[index].api.disconnect();\n    }\n\n    this.providers = [];\n    this.lastBlockIds = [];\n    this.lastFinalizedBlockIds = [];\n  }\n\n  async restartNodeProviders(): Promise<void> {\n    await this.closeProviders();\n    await this.initializeProviders();\n  }\n\n  private async areNodesSyncing(): Promise<boolean> {\n    for (let index = 0; index < this.providers.length; index += 1) {\n      const node = await this.providers[index].api.rpc.system.health();\n      if (node.isSyncing.eq(true)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private async syncNode(): Promise<void> {\n    while (await this.areNodesSyncing()) {\n      await wait(1000);\n    }\n  }\n\n  private async initializeNodeProviders() {\n    logger.info('Inside');\n    for (let index = 0; index < this.urls.length; index += 1) {\n      const provider = new Provider({\n        provider: new WsProvider(this.urls[index]),\n      });\n      await provider.api.isReadyOrError;\n      this.providers.push(provider);\n      this.lastBlockIds.push(-1);\n    }\n\n    for (let index = 0; index < this.providers.length; index += 1) {\n      this.providers[index].api.rpc.chain.subscribeFinalizedHeads(\n        async (header) => {\n          this.lastFinalizedBlockIds[index] = header.number.toNumber();\n        },\n      );\n      this.providers[index].api.rpc.chain.subscribeNewHeads(async (header) => {\n        this.lastBlockIds[index] = header.number.toNumber();\n      });\n    }\n  }\n}\n"]}