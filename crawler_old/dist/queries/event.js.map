{"version":3,"file":"event.js","sourceRoot":"/","sources":["queries/event.ts"],"names":[],"mappings":";;;AACA,kDAA4C;AAE5C,MAAM,YAAY,GAAG,KAAK,EAAE,EAC1B,EAAE,EACF,OAAO,EACP,WAAW,EACX,KAAK,EACL,KAAK,EAAE,EACL,KAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,EAChC,KAAK,GACN,EACD,SAAS,GACC,EAAmB,EAAE,CAAC,IAAI,EAAE,KAAK,OAAO,KAAK,WAAW,KAAK,KAAK,MAAM,OAAO,OAAO,MAAM,OAAO,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,SAAS,IAAI,CAAC;AAE7J,MAAM,YAAY,GAAG,KAAK,EAAE,MAAmB,EAAiB,EAAE;IACvE,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,MAAM,IAAA,kBAAM,EAAC;;;;IAIb,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;CAC5D,CAAC,CAAC;KACA;AACH,CAAC,CAAC;AATW,QAAA,YAAY,gBASvB;AAEK,MAAM,WAAW,GAAG,KAAK,EAAE,KAAgB,EAAE,EAAE,CAAC,IAAA,oBAAY,EAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAAhE,QAAA,WAAW,eAAqD;AAE7E,MAAM,oBAAoB,GAAG,CAAC,EAC5B,OAAO,EACP,UAAU,EACV,OAAO,EACP,MAAM,EACN,WAAW,EACX,gBAAgB,EAChB,aAAa,EACb,eAAe,EACf,aAAa,EACb,aAAa,EACb,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,SAAS,GACG,EAAU,EAAE,CAAC;MACrB,OAAO,OAAO,UAAU,MAAM,OAAO,KAAK,MAAM,KAAK,WAAW,KAAK,aAAa,KAAK,gBAAgB,KAAK,eAAe,KAAK,aAAa,KAAK,aAAa,MAAM,QAAQ,MAAM,KAAK,KAAK,QAAQ,MAAM,SAAS,IAAI,CAAC;AAExN,MAAM,cAAc,GAAG,KAAK,EACjC,QAAuB,EACR,EAAE;IACjB,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,MAAM,IAAA,kBAAM,EAAC;;;;IAIb,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;;;;;;;;;;;;;;;CAe/C,CAAC,CAAC;KACA;AACH,CAAC,CAAC;AAzBW,QAAA,cAAc,kBAyBzB","sourcesContent":["import { AccountBody, EventBody } from '../crawler/types';\nimport { insert } from '../utils/connector';\n\nconst toEventValue = async ({\n  id,\n  blockId,\n  extrinsicId,\n  index,\n  event: {\n    event: { method, section, data },\n    phase,\n  },\n  timestamp,\n}: EventBody): Promise<string> => `(${id}, ${blockId}, ${extrinsicId}, ${index}, '${section}', '${method}', '${data}', '${JSON.stringify(phase)}', '${timestamp}')`;\n\nexport const insertEvents = async (events: EventBody[]): Promise<void> => {\n  if (events.length > 0) {\n    await insert(`\nINSERT INTO event\n  (id, block_id, extrinsic_id, index, section, method, data, phase, timestamp)\nVALUES\n  ${(await Promise.all(events.map(toEventValue))).join(',\\n')};\n`);\n  }\n};\n\nexport const insertEvent = async (event: EventBody) => insertEvents([event]);\n\nconst accountToInsertValue = ({\n  address,\n  evmAddress,\n  blockId,\n  active,\n  freeBalance,\n  availableBalance,\n  lockedBalance,\n  reservedBalance,\n  votingBalance,\n  vestedBalance,\n  identity,\n  nonce,\n  evmNonce,\n  timestamp,\n}: AccountBody): string => `\n  ('${address}', '${evmAddress}', ${blockId}, ${active}, ${freeBalance}, ${lockedBalance}, ${availableBalance}, ${reservedBalance}, ${votingBalance}, ${vestedBalance}, '${identity}', ${nonce}, ${evmNonce}, '${timestamp}')`;\n\nexport const insertAccounts = async (\n  accounts: AccountBody[],\n): Promise<void> => {\n  if (accounts.length > 0) {\n    await insert(`\nINSERT INTO account\n  (address, evm_address, block_id, active, free_balance, locked_balance, available_balance, reserved_balance, voting_balance, vested_balance, identity, nonce, evm_nonce, timestamp)\nVALUES\n  ${accounts.map(accountToInsertValue).join(',')}\nON CONFLICT (address) DO UPDATE SET\n  active = EXCLUDED.active,\n  block_id = EXCLUDED.block_id,\n  evm_address = EXCLUDED.evm_address,\n  free_balance = EXCLUDED.free_balance,\n  locked_balance = EXCLUDED.locked_balance,\n  vested_balance = EXCLUDED.vested_balance,\n  voting_balance = EXCLUDED.voting_balance,\n  reserved_balance = EXCLUDED.reserved_balance,\n  available_balance = EXCLUDED.available_balance,\n  timestamp = EXCLUDED.timestamp,\n  nonce = EXCLUDED.nonce,\n  evm_nonce = EXCLUDED.evm_nonce,\n  identity = EXCLUDED.identity;\n`);\n  }\n};\n"]}