{"version":3,"file":"extrinsic.js","sourceRoot":"/","sources":["queries/extrinsic.ts"],"names":[],"mappings":"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","sourcesContent":["import { SignedExtrinsicData, Transfer } from '../crawler/types';\nimport { insert, insertV2, query } from '../utils/connector';\n\nexport interface InsertExtrinsic {\n  blockId: number;\n  index: number;\n  hash: string;\n  args: string;\n  docs: string;\n  method: string;\n  section: string;\n  signed: string;\n  status: string;\n  errorMessage: string;\n  timestamp: string;\n}\n\nexport interface InsertExtrinsicBody extends InsertExtrinsic {\n  id: number;\n  signedData?: SignedExtrinsicData;\n}\n\nconst extrinsicToValue = ({\n  id,\n  blockId,\n  index,\n  hash,\n  args,\n  docs,\n  method,\n  section,\n  status,\n  errorMessage,\n  signed,\n  signedData,\n  timestamp,\n}: InsertExtrinsicBody): string => `(\n  ${id}, ${blockId}, ${index}, '${hash}', '${args}', '${docs.replace(\n  /'/g,\n  \"''\",\n)}', '${method}', \n  '${section}', '${signed}', '${status}', '${errorMessage}', \n  ${signedData ? \"'signed'\" : \"'unsigned'\"}, ${\n  signedData ? `'${JSON.stringify(signedData)}'` : 'null'\n}, '${timestamp}'\n)`;\n\nexport const insertExtrinsics = async (\n  extrinsics: InsertExtrinsicBody[],\n): Promise<void> => {\n  if (extrinsics.length > 0) {\n    await insert(`\nINSERT INTO extrinsic\n  (id, block_id, index, hash, args, docs, method, section, signer, status, error_message, type, signed_data, timestamp)\nVALUES\n${extrinsics.map(extrinsicToValue).join(',')}\nON CONFLICT DO NOTHING;\n`);\n  }\n};\n\nexport const insertExtrinsic = async (\n  extrinsic: InsertExtrinsicBody,\n): Promise<void> => insertExtrinsics([extrinsic]);\n\nconst transferToValue = ({\n  type,\n  denom,\n  nftId,\n  amount,\n  blockId,\n  success,\n  timestamp,\n  toAddress,\n  feeAmount,\n  extrinsicId,\n  fromAddress,\n  tokenAddress,\n  errorMessage,\n  toEvmAddress,\n  fromEvmAddress,\n}: Transfer): any[] => [blockId, extrinsicId, denom || null, nftId || null, toAddress === 'null' ? null : toAddress, fromAddress === 'null' ? null : fromAddress, toEvmAddress, fromEvmAddress, tokenAddress, amount === '' ? '0' : amount, feeAmount === '' ? '0' : feeAmount, success, errorMessage, type, timestamp];\n\nexport const insertTransfers = async (transfers: Transfer[]): Promise<void> => {\n  if (transfers.length === 0) {\n    return;\n  }\n  await insertV2(`\n    INSERT INTO transfer\n      (block_id, extrinsic_id, denom, nft_id, to_address, from_address, to_evm_address, from_evm_address, token_address, amount, fee_amount, success, error_message, type, timestamp)\n    VALUES\n      %L;\n  `, transfers.map(transferToValue));\n};\n\ninterface ID {\n  id: string;\n}\n\nconst nextFreeTableId = async (table: string): Promise<number> => {\n  const result = await query<ID>(`SELECT id FROM ${table} ORDER BY id DESC LIMIT 1`);\n  return result.length > 0 ? parseInt(result[0].id, 10) + 1 : 0;\n};\n\nexport const freeEventId = async () => nextFreeTableId('event');\nexport const freeExtrinsicId = async () => nextFreeTableId('extrinsic');\n\ntype EventId = number;\ntype ExtrinsicId = number;\n\nexport const nextFreeIds = async (): Promise<[EventId, ExtrinsicId]> => Promise.all([freeEventId(), freeExtrinsicId()]);\n"]}