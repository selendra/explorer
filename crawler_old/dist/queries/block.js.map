{"version":3,"file":"block.js","sourceRoot":"/","sources":["queries/block.ts"],"names":[],"mappings":";;;AAAA,kDAA8D;AAgBvD,MAAM,mBAAmB,GAAG,KAAK,IAAqB,EAAE;IAC7D,MAAM,MAAM,GAAG,MAAM,IAAA,iBAAK,EACxB,sEAAsE,CACvE,CAAC;IACF,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC/D,CAAC,CAAC;AALW,QAAA,mBAAmB,uBAK9B;AAEK,MAAM,cAAc,GAAG,KAAK,EAAE,OAAe,EAAiB,EAAE;IACrE,MAAM,IAAA,iBAAK,EAAC,gDAAgD,OAAO,EAAE,CAAC,CAAC;AACzE,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEF,MAAM,oBAAoB,GAAG,CAAC,EAC5B,EAAE,EACF,IAAI,EACJ,MAAM,EACN,SAAS,EACT,UAAU,EACV,aAAa,EACb,SAAS,GACU,EAAS,EAAE,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;AAEvG,MAAM,oBAAoB,GAAG,KAAK,EACvC,IAA0B,EACX,EAAE,CAAC,IAAA,oBAAQ,EAAC;;;;;;;;;;;;;CAa5B,EAAE,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;AAftB,QAAA,oBAAoB,wBAeE;AAE5B,MAAM,WAAW,GAAG,KAAK,EAC9B,IAAwB,EACT,EAAE,CAAC,IAAA,4BAAoB,EAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AAFpC,QAAA,WAAW,eAEyB;AAE1C,MAAM,qBAAqB,GAAG,KAAK,EAAE,MAAc,EAAE,IAAY,EAAE,EAAE,CAAC,IAAA,iBAAK,EAChF,iDAAiD,MAAM,aAAa,IAAI,GAAG,CAC5E,CAAC;AAFW,QAAA,qBAAqB,yBAEhC;AACK,MAAM,oBAAoB,GAAG,KAAK,EAAE,EAAU,EAAE,EAAE,CAAC,IAAA,iBAAK,EAC7D,gDAAgD,EAAE,GAAG,CACtD,CAAC;AAFW,QAAA,oBAAoB,wBAE/B;AAEK,MAAM,sBAAsB,GAAG,KAAK,IAAI,EAAE,CAAC,IAAA,iBAAK,EAAC,4CAA4C,CAAC,CAAC;AAAzF,QAAA,sBAAsB,0BAAmE;AAK/F,MAAM,iBAAiB,GAAG,KAAK,EAAE,EAAU,EAAkC,EAAE;IACpF,MAAM,MAAM,GAAG,MAAM,IAAA,mBAAO,EAAc,uCAAuC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzF,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AACnD,CAAC,CAAC;AAHW,QAAA,iBAAiB,qBAG5B;AAEK,MAAM,iBAAiB,GAAG,KAAK,EAAE,EAAU,EAAiB,EAAE;IACnE,MAAM,IAAA,mBAAO,EAAC,kCAAkC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC;AAFW,QAAA,iBAAiB,qBAE5B","sourcesContent":["import { insertV2, query, queryv2 } from '../utils/connector';\n\ninterface BlockID {\n  id: string;\n}\n\ninterface InsertInitialBlock {\n  id: number;\n  hash: string;\n  author: string;\n  stateRoot: string;\n  timestamp: string;\n  parentHash: string;\n  extrinsicRoot: string;\n}\n\nexport const lastBlockInDatabase = async (): Promise<number> => {\n  const result = await query<BlockID>(\n    'SELECT ID FROM block WHERE finalized = true ORDER By id DESC LIMIT 1',\n  );\n  return result.length === 0 ? -1 : parseInt(result[0].id, 10);\n};\n\nexport const blockFinalized = async (blockId: number): Promise<void> => {\n  await query(`UPDATE block SET finalized = true WHERE id = ${blockId}`);\n};\n\nconst blockValuesStatement = ({\n  id,\n  hash,\n  author,\n  stateRoot,\n  parentHash,\n  extrinsicRoot,\n  timestamp,\n}: InsertInitialBlock): any[] => [id, hash, author, stateRoot, parentHash, extrinsicRoot, 'false', timestamp];\n\nexport const insertMultipleBlocks = async (\n  data: InsertInitialBlock[],\n): Promise<void> => insertV2(`\nINSERT INTO block\n    (id, hash, author, state_root, parent_hash, extrinsic_root, finalized, timestamp)\n  VALUES\n    %L\n  ON CONFLICT (id) DO UPDATE SET\n    author = EXCLUDED.author,\n    finalized = EXCLUDED.finalized,\n    timestamp = EXCLUDED.timestamp,\n    state_root = EXCLUDED.state_root,\n    parent_hash = EXCLUDED.parent_hash,\n    extrinsic_root = EXCLUDED.extrinsic_root,\n    hash = EXCLUDED.hash;\n`, data.map(blockValuesStatement));\n\nexport const insertBlock = async (\n  data: InsertInitialBlock,\n): Promise<void> => insertMultipleBlocks([data]);\n\nexport const updateBlocksFinalized = async (fromID: number, toID: number) => query(\n  `UPDATE block SET finalized = true WHERE id >= ${fromID} AND id < ${toID};`,\n);\nexport const updateBlockFinalized = async (id: number) => query(\n  `UPDATE block SET finalized = true WHERE id = ${id};`,\n);\n\nexport const deleteUnfinishedBlocks = async () => query('DELETE FROM block WHERE finalized = false;');\n\ninterface BlockHashDB {\n  hash: string;\n}\nexport const retrieveBlockHash = async (id: number): Promise<BlockHashDB|undefined> => {\n  const result = await queryv2<BlockHashDB>('SELECT hash FROM block WHERE id = $1;', [id]);\n  return result.length > 0 ? result[0] : undefined;\n};\n\nexport const removeBlockWithId = async (id: number): Promise<void> => {\n  await queryv2('DELETE FROM block WHERE id = $1;', [id]);\n};\n"]}