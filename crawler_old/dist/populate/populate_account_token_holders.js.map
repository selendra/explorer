{"version":3,"file":"populate_account_token_holders.js","sourceRoot":"/","sources":["populate/populate_account_token_holders.ts"],"names":[],"mappings":";;;;;AAGA,4CAA+D;AAC/D,wDAA4F;AAC5F,kDAA2D;AAC3D,6DAAqC;AACrC,0CAAwD;AAcxD,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;IACtB,MAAM,wBAAY,CAAC,mBAAmB,EAAE,CAAC;IAEzC,gBAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;IAC9C,MAAM,IAAI,GAAG,MAAM,IAAA,mBAAO,EACxB;;;;;;;GAOD,CACA,CAAC;IAEF,gBAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACnC,wBAAwB;IACxB,MAAM,MAAM,GAAG,IAAA,8BAAsB,EAAC,IAAI,EAAE,CAAC,eAAe,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;IAExF,6BAA6B;IAC7B,MAAM,UAAU,GAAkB,EAAE,CAAC;IACrC,MAAM,YAAY,GAAkB,EAAE,CAAC;IAEvC,oDAAoD;IACpD,2BAA2B;IAC3B,KAAK,MAAM,MAAM,IAAI,MAAM,EAAE;QAC3B,gBAAM,CAAC,IAAI,CAAC,qBAAqB,MAAM,CAAC,MAAM,YAAY,MAAM,CAAC,aAAa,UAAU,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QACzG,MAAM,OAAO,GAAG,MAAM,CAAC,aAAa,KAAK,SAAS;YAChD,CAAC,CAAC,MAAM,IAAA,wBAAgB,EAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,MAAO,EAAE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACrH,CAAC,CAAC,MAAM,IAAA,iBAAS,EAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAEjG,MAAM,SAAS,GAAgB;YAC7B,OAAO;YACP,UAAU,EAAE,EAAE;YACd,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,KAAK,EAAE,IAAI;YACX,aAAa,EAAE,MAAM,CAAC,MAAM;YAC5B,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,WAAW,EAAE;YAC7C,YAAY,EAAE,MAAM,CAAC,aAAa;YAClC,IAAI,EAAE,MAAM,CAAC,IAAI;SAClB,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,EAAE;YAC1B,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC9B;aAAM;YACL,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC5B;KACF;IAED,gBAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;IAC/C,MAAM,IAAA,uCAAyB,EAAC,YAAY,CAAC,CAAC;IAE9C,gBAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IAC1C,MAAM,IAAA,qCAAuB,EAAC,UAAU,CAAC,CAAC;IAE1C,gBAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAC5C,MAAM,IAAA,mBAAO,EAAC,gFAAgF,CAAC,CAAC;IAEhG,gBAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;AACtD,CAAC,CAAC;AAEF,IAAI,EAAE;KACH,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;KAC1B,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;IACV,gBAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC","sourcesContent":["import {\n  ABIS, ERC20Data, ERC721Data, TokenHolder,\n} from '../crawler/types';\nimport { balanceOf, balanceOfErc1155 } from '../crawler/utils';\nimport { insertAccountNftHolders, insertAccountTokenHolders } from '../queries/tokenHoldes';\nimport { nodeProvider, queryv2 } from '../utils/connector';\nimport logger from '../utils/logger';\nimport { dropDuplicatesMultiKey } from '../utils/utils';\n\ninterface TokenHolderExtendedData {\n  token_address: string;\n  signer: string;\n  evm_address: string;\n  nft_id: string | null;\n  info: ERC20Data | ERC721Data | null; // ERC1155 is an empty object\n  type: 'Account';\n  contract_type: 'ERC20' | 'ERC721' | 'ERC1155';\n  name: string;\n  compiled_data: ABIS;\n}\n\nconst main = async () => {\n  await nodeProvider.initializeProviders();\n\n  logger.info('Retrieving wrong token holders');\n  const data = await queryv2<TokenHolderExtendedData>(\n    `SELECT \n      th.token_address, th.signer, th.evm_address, th.nft_id, th.type, th.info,\n      vc.type as contract_type, vc.name, vc.compiled_data \n    FROM token_holder as th\n    JOIN contract as c ON c.address = th.token_address\n    JOIN verified_contract as vc ON c.address = vc.address\n    WHERE th.signer IS NOT NULL AND th.evm_address IS NOT NULL;\n  `,\n  );\n\n  logger.info('Removing duplicates');\n  // Aligning primary keys\n  const result = dropDuplicatesMultiKey(data, ['token_address', 'evm_address', 'nft_id']);\n\n  // Creating new token holders\n  const nftHolders: TokenHolder[] = [];\n  const tokenHolders: TokenHolder[] = [];\n\n  // Resolving latest balance of signer, token and nft\n  // eslint-disable-next-line\n  for (const holder of result) {\n    logger.info(`Processing signer ${holder.signer}, token: ${holder.token_address}, nft: ${holder.nft_id}`);\n    const balance = holder.contract_type === 'ERC1155'\n      ? await balanceOfErc1155(holder.evm_address, holder.token_address, holder.nft_id!, holder.compiled_data[holder.name])\n      : await balanceOf(holder.evm_address, holder.token_address, holder.compiled_data[holder.name]);\n\n    const newHolder: TokenHolder = {\n      balance,\n      evmAddress: '',\n      info: holder.info,\n      nftId: null,\n      signerAddress: holder.signer,\n      timestamp: new Date(Date.now()).toUTCString(),\n      tokenAddress: holder.token_address,\n      type: holder.type,\n    };\n\n    if (holder.nft_id === null) {\n      tokenHolders.push(newHolder);\n    } else {\n      nftHolders.push(newHolder);\n    }\n  }\n\n  logger.info('Inserting account token holders');\n  await insertAccountTokenHolders(tokenHolders);\n\n  logger.info('Insert account nft holders');\n  await insertAccountNftHolders(nftHolders);\n\n  logger.info('Deleting wrong token holders');\n  await queryv2('DELETE FROM token_holder WHERE signer IS NOT NULL AND evm_address IS NOT NULL;');\n\n  logger.info('Account token & nft holders repaired');\n};\n\nmain()\n  .then(() => process.exit())\n  .then((e) => {\n    logger.error(e);\n    process.exit(404);\n  });\n"]}