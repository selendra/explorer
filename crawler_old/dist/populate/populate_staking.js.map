{"version":3,"file":"populate_staking.js","sourceRoot":"/","sources":["populate/populate_staking.ts"],"names":[],"mappings":";;;;;AAAA,mCAAmC;AACnC,4CAAqD;AACrD,gDAA0F;AAE1F,4CAAkD;AAClD,kDAA2D;AAC3D,6DAAqC;AACrC,0CAAyE;AAUzE,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;IACtB,MAAM,wBAAY,CAAC,mBAAmB,EAAE,CAAC;IAEzC,gBAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IACrC,MAAM,IAAA,mBAAO,EAAC,mCAAmC,CAAC,CAAC;IAEnD,gBAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IACtC,8BAA8B;IAC9B,MAAM,aAAa,GAAG,MAAM,IAAA,mBAAO,EAAe,yEAAyE,CAAC;SACzH,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EACtB,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,SAAS,GACjD,EAAuB,EAAE,CAAC,CAAC;QAC1B,EAAE;QACF,OAAO,EAAE,QAAQ;QACjB,IAAI,EAAE,CAAC,OAAO,EAAE,kBAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC;QAClD,SAAS,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE;KAC7C,CAAC,CAAC,CAAC,CAAC;IAEP,MAAM,mBAAmB,GAAG,aAAa,CAAC,MAAM,CAAC;IACjD,gBAAM,CAAC,IAAI,CAAC,aAAa,mBAAmB,iBAAiB,CAAC,CAAC;IAE/D,gBAAM,CAAC,IAAI,CAAC,qEAAqE,CAAC,CAAC;IACnF,MAAM,OAAO,GAAc,EAAE,CAAC;IAC9B,gCAAgC;IAChC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,mBAAmB,EAAE,KAAK,EAAE,EAAE;QACxD,IAAI,KAAK,GAAG,GAAG,KAAK,CAAC,EAAE;YACrB,uCAAuC;YACvC,gBAAM,CAAC,IAAI,CAAC,6BAA6B,KAAK,yBAAyB,CAAC,KAAK,GAAG,mBAAmB,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SAC5H;QACD,OAAO,CAAC,IAAI,CAAC,MAAM,IAAA,6BAAmB,EAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAC/D;IAED,gBAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IACzC,MAAM,cAAc,GAAG,IAAA,sBAAc,EACnC,OAAO,CAAC,GAAG,CAAC,0BAAgB,CAAC,EAC7B,SAAS,CACV,CAAC;IAEF,gBAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACxC,MAAM,QAAQ,GAAG,MAAM,IAAA,+BAAuB,EAC5C,cAAc,CAAC,GAAG,CAAC,yBAAiB,CAAC,CACtC,CAAC;IAEF,gBAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAClC,MAAM,IAAA,sBAAc,EAAC,QAAQ,CAAC,CAAC;IAE/B,gBAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACjC,MAAM,IAAA,uBAAa,EAAC,OAAO,CAAC,CAAC;IAE7B,gBAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC3B,CAAC,CAAC;AAEF,IAAI,EAAE;KACH,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;KAC1B,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,gBAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","sourcesContent":["import { BigNumber } from 'ethers';\nimport { accountHeadToBody } from '../crawler/event';\nimport { insertStaking, processStakingEvent, stakingToAccount } from '../crawler/staking';\nimport { NeededStakingValues, Staking } from '../crawler/types';\nimport { insertAccounts } from '../queries/event';\nimport { nodeProvider, queryv2 } from '../utils/connector';\nimport logger from '../utils/logger';\nimport { dropDuplicates, resolvePromisesAsChunks } from '../utils/utils';\n\ninterface StakingEvent {\n  id: number;\n  block_id: number;\n  extrinsic_id: number;\n  timestamp: string;\n  data: [string, string];\n}\n\nconst main = async () => {\n  await nodeProvider.initializeProviders();\n\n  logger.info('Removing staking data');\n  await queryv2('DELETE FROM staking WHERE id > 0;');\n\n  logger.info('Loading staking events');\n  /* eslint-disable camelcase */\n  const stakingEvents = await queryv2<StakingEvent>('SELECT * FROM event WHERE method = \\'Reward\\' OR method = \\'Rewarded\\';')\n    .then((res) => res.map(({\n      id, block_id, data: [address, amount], timestamp,\n    }): NeededStakingValues => ({\n      id,\n      blockId: block_id,\n      data: [address, BigNumber.from(amount).toString()],\n      timestamp: new Date(timestamp).toISOString(),\n    })));\n\n  const stakingEventsLength = stakingEvents.length;\n  logger.info(`There are ${stakingEventsLength} staking events`);\n\n  logger.info('Processing staking events and extracting reward destination mapping');\n  const staking: Staking[] = [];\n  /* eslint-disable no-plusplus */\n  for (let index = 0; index < stakingEventsLength; index++) {\n    if (index % 100 === 0) {\n      /* eslint-disable no-mixed-operators */\n      logger.info(`Current processing index: ${index}, current percentage: ${(index / stakingEventsLength * 100).toFixed(2)} %`);\n    }\n    staking.push(await processStakingEvent(stakingEvents[index]));\n  }\n\n  logger.info('Updating account balances');\n  const accountHeaders = dropDuplicates(\n    staking.map(stakingToAccount),\n    'address',\n  );\n\n  logger.info('Loading account balances');\n  const accounts = await resolvePromisesAsChunks(\n    accountHeaders.map(accountHeadToBody),\n  );\n\n  logger.info('Inserting accounts');\n  await insertAccounts(accounts);\n\n  logger.info('Inserting staking');\n  await insertStaking(staking);\n\n  logger.info('Complete!');\n};\n\nmain()\n  .then(() => process.exit())\n  .catch((err) => logger.error(err));\n"]}