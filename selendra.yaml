openapi: 3.0.1
info:
  title: Selendra scan swagger
  contact:
    name: Selendra
    url: https://selendra.org
    email: info@selendra.org
  license:
    name: MIT
  version: 0.2.0

servers:
- url: https://scan-api.selendra.org/
paths:
  /block/{block_number}:
    get:
      tags:
      - block
      summary: Get block detail by block number
      operationId: BlockByBlockNumer
      parameters:
      - name: block_number
        in: path
        description: Use block number to retrieve block detail
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /block/all/{page_number}:
    get:
      tags:
      - block
      summary: Get all block detail by page number
      operationId: BlocksByPageNumber
      parameters:
      - name: page_number
        in: path
        description: Use page number to retrieve all blocks
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blocks'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/{address}:
    get:
      tags:
      - account
      summary: Get account detail by address
      operationId: AccountByAddress
      parameters:
      - name: address
        in: path
        description: Use address to retrieve account detail
        required: true
        schema:
          type: string
          example: "seaNrTD9PpKseJKzGtR6KSoG32SB5tSF8DbZ7eqZp194YgTVu"
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/all/{page_number}:
    get:
      tags:
      - account
      summary: Get all accounts by page nubmer
      operationId: AccountsByPage
      parameters:
      - name: page_number
        in: path
        description: Use page nuber to retrieve all accounts
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/extrinsics/{address}/{page_number}:
    get:
      tags:
      - account
      summary: Get all accounts by page address
      operationId: AccountExtrinsicsByAddress
      parameters:
      - name: address
        in: path
        description: Use address to retrieve all extrinsics
        required: true
        schema:
          type: string
          example: "seXog1QcSuU6Y9Us99A2v8ToQSfwvrJEsj2avaWkd2PHxYXfj"
      - name: page_number
        in: path
        description: Use page nuber to retrieve all extrinsics in account
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountExtrinsics'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/transfer/{address}/{page_number}:
    get:
      tags:
      - account
      summary: Get all accounts by page address
      operationId: AccountTransferByAddress
      parameters:
      - name: address
        in: path
        description: Use address to retrieve all transfers
        required: true
        schema:
          type: string
          example: "seXog1QcSuU6Y9Us99A2v8ToQSfwvrJEsj2avaWkd2PHxYXfj"
      - name: page_number
        in: path
        description: Use page nuber to retrieve all transfers in account
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTransfers'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/staking/{address}/{page_number}:
    get:
      tags:
      - account
      summary: Get all accounts by page address
      operationId: AccountStakingByAddress
      parameters:
      - name: address
        in: path
        description: Use address to retrieve all rewards and slash
        required: true
        schema:
          type: string
          example: "seaZ6tDPD6jdhwbbZmA7kqwMBAsqV79ZR1aTcz1KVJaEwQs42"
      - name: page_number
        in: path
        description: Use page nuber to retrieve all rewards and slash in account
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStakings'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /extrinsic/{hash}:
    get:
      tags:
      - extrinsic
      summary: Get all extrinsics by hash
      operationId: ExtrinsicByHash
      parameters:
      - name: hash
        in: path
        description: Use hash to retrieve extrinsics
        required: true
        schema:
          type: string
          example: "0x237e9fcd3f06f8347ecd932d6d190dc2cd54e64da04b330f83bb6616652b8fa1"
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extrinsic'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /extrinsic/all/{page_number}:
    get:
      tags:
      - extrinsic
      summary: Get all extrinsics by page nubmer
      operationId: ExtrinsicBypage
      parameters:
      - name: page_number
        in: path
        description: Use page nuber to retrieve all extrinsics
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extrinsics'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /extrinsic/signed/{page_number}:
    get:
      tags:
      - extrinsic
      summary: Get all signed extrinsics by page nubmer
      operationId: ExtrinsicSignedBypage
      parameters:
      - name: page_number
        in: path
        description: Use page nuber to retrieve all signed extrinsics
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extrinsics'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /extrinsic/{module}/{page_number}:
    get:
      tags:
      - extrinsic
      summary: Get all extrinsics by module and page nubmer
      operationId: ExtrinsicsByModule
      parameters:
      - name: module
        in: path
        description: Use module to retrieve all extrinsic with specific module
        required: true
        schema:
          $ref: '#/components/schemas/Modules'
      - name: page_number
        in: path
        description: Use page nuber to retrieve all event
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Extrinsics'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /transfer/{hash}:
    get:
      tags:
      - transfer
      summary: Get all transfers by hash
      operationId: TransferByHash
      parameters:
      - name: hash
        in: path
        description: Use hash to retrieve transfers
        required: true
        schema:
          type: string
          example: "0x237e9fcd3f06f8347ecd932d6d190dc2cd54e64da04b330f83bb6616652b8fa1"
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /transfer/all/{page_number}:
    get:
      tags:
      - transfer
      summary: Get all transfers by page nubmer
      operationId: TransferBypage
      parameters:
      - name: page_number
        in: path
        description: Use page nuber to retrieve all transfers
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfers'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /event/{module}/{page_number}:
    get:
      tags:
      - event
      summary: Get all event by module and page nubmer
      operationId: EventByModule
      parameters:
      - name: module
        in: path
        description: Use module to retrieve all event with specific module
        required: true
        schema:
          $ref: '#/components/schemas/Modules'
      - name: page_number
        in: path
        description: Use page nuber to retrieve all event
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /event/all/{page_number}:
    get:
      tags:
      - event
      summary: Get all event by page nubmer
      operationId: EventBypage
      parameters:
      - name: page_number
        in: path
        description: Use page nuber to retrieve all event
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /log/{engine_type}/{page_number}:
    get:
      tags:
      - log
      summary: Get all log by engine type and page nubmer
      operationId: logByEngine
      parameters:
      - name: engine_type
        in: path
        description: Use specific engine type module to retrieve all logs 
        required: true
        schema:
          $ref: '#/components/schemas/Engins'
      - name: page_number
        in: path
        description: Use page nuber to retrieve all logs
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /log/all/{page_number}:
    get:
      tags:
      - log
      summary: Get all log by page nubmer
      operationId: LogBypage
      parameters:
      - name: page_number
        in: path
        description: Use page nuber to retrieve all logs
        required: true
        schema:
          type: integer
          example: 1
          minimum: 1
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /runtimes:
    get:
      tags:
      - runtime
      summary: Get all runtime
      operationId: Runtime
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Runtimes'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /runtimes/last:
    get:
      tags:
      - runtime
      summary: Get last runtime
      operationId: LastRuntime
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Runtime'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /staking/status:
    get:
      tags:
      - staking
      summary: Get all staking infomation of current era
      operationId: StakingStatus
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatorStatus'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /staking/feature_of_week:
    get:
      tags:
      - staking
      summary: Get random featured validator of the week that meet the rules
      operationId: ValidatorFeature
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValaidatorFeature'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /staking/validators:
    get:
      tags:
      - staking
      summary: Get all validator order by ranking
      operationId: Validator
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validators'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Block:
      type: object
      properties:
        blockNumber:
          type: integer
          format: int64
        finalized:
          type: boolean
        blockAuthor:
          type: string
        blockAuthorName:
          type: string
        blockHash:
          type: string
        parentHash:
          type: string
        extrinsicsRoot:
          type: string
        stateRoot:
          type: string
        activeEra:
          type: integer
          format: int64
        currentIndex:
          type: integer
          format: int64
        runtimeVersion:
          type: integer
          format: int16
        totalEvents:
          type: integer
          format: int16
        totalExtrinsics:
          type: integer
          format: int16
        totalIssuance:
          type: integer
          format: int64
        timestamp:
          type: integer
          format: int64
    Blocks:
      type: object
      properties:
        total_block:
          type: integer
          format: int64
        at_page:
          type: integer
          format: int64
        total_page:
          type: integer
          format: int64
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/Block'
    Account:
      type: object
      properties:
        accountId:
          type: string
        identityDisplay:
          type: string
        totalBalance:
          type: integer
          format: int64
        availableBalance:
          type: integer
          format: int64
        freeBalance:
          type: integer
          format: int64
        lockedBalance:
          type: integer
          format: int64
        reservedBalance:
          type: integer
          format: int64
        timestamp:
          type: integer
          format: int64
    Accounts:
      type: object
      properties:
        total_account:
          type: integer
          format: int64
        at_page:
          type: integer
          format: int64
        total_page:
          type: integer
          format: int64
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    AccountExtrinsic:
      type: object
      properties:
        blockNumber:
          type: integer
          format: int64
        extrinsicIndex:
          type: integer
          format: int16
        success:
          type: boolean
        section:
          type: string
        method:
          type: string
        hash:
          type: string
        timestamp:
          type: integer
          format: int64
    AccountExtrinsics:
      type: object
      properties:
        total_extriniscs:
          type: integer
          format: int64
        at_page:
          type: integer
          format: int64
        total_page:
          type: integer
          format: int64
        extriniscs:
          type: array
          items:
            $ref: '#/components/schemas/AccountExtrinsic'
    AccountTransfer:
      type: object
      properties:
        blockNumber:
          type: integer
          format: int64
        extrinsicIndex:
          type: integer
          format: int16
        destination:
          type: string
        amount:
          type: integer
          format: int64
        feeAmount:
          type: integer
          format: int32
        success:
          type: boolean
        hash:
          type: string
        timestamp:
          type: integer
          format: int64
    AccountTransfers:
      type: object
      properties:
        total_transfer:
          type: integer
          format: int64
        at_page:
          type: integer
          format: int64
        total_page:
          type: integer
          format: int64
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/AccountTransfer'
    AccountStaking:
      type: object
      properties:
        blockNumber:
          type: integer
          format: int64
        eventIndex:
          type: integer
          format: int16
        amount:
          type: integer
          format: int64
        era:
          type: integer
          format: int16
        validatorStashAddress:
          type: string
        timestamp:
          type: integer
          format: int64
    AccountStakings:
      type: object
      properties:
        total_lists:
          type: integer
          format: int64
        at_page:
          type: integer
          format: int64
        total_page:
          type: integer
          format: int64
        staking_list:
          type: array
          items:
            $ref: '#/components/schemas/AccountStaking'
    Extrinsic:
      type: object
      properties:
        blockNumber:
          type: integer
          format: int64
        extrinsicIndex:
          type: integer
          format: int16
        signer:
          type: string
        hash:
          type: string
        method:
          type: string
        section:
          type: string
        args:
          type: string
        argsDef:
          type: string
        doc:
          type: string
        feeDetails:
          type: string
        feeInfo:
          type: string
        errorMessage:
          type: string
        isSigned:
          type: boolean
        success:
          type: boolean
        timestamp:
          type: integer
          format: int64
    Extrinsics:
      type: object
      properties:
        total_extrinsics:
          type: integer
          format: int64
        at_page:
          type: integer
          format: int64
        total_page:
          type: integer
          format: int64
        extrinsics:
          type: array
          items:
            $ref: '#/components/schemas/Extrinsic'
    Transfer:
      type: object
      properties:
        blockNumber:
          type: integer
          format: int64
        extrinsicIndex:
          type: integer
          format: int16
        hash:
          type: string
        source:
          type: string
        destination:
          type: string
        amount:
          type: integer
          format: int64
        feeAmount:
          type: integer
          format: int64
        method:
          type: string
        success:
          type: boolean
        errorMessage:
          type: string
        timestamp:
          type: integer
          format: int64
    Transfers:
      type: object
      properties:
        total_transfer:
          type: integer
          format: int64
        at_page:
          type: integer
          format: int64
        total_page:
          type: integer
          format: int64
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
    Runtime:
      type: object
      properties:
        blockNumber:
          type: integer
          format: int64
        specName:
          type: string
        specVersion:
          type: integer
          format: int64
        metadata_version:
          type: string
        magic_number:
          type: string
        metadata:
          type: array
          items: 
            $ref: '#/components/schemas/Metadata'
        timestamp:
          type: integer
          format: int64
    Runtimes:
      type: object
      properties:
        total_runtimes:
          type: integer
          format: int64
        runtimes:
          type: array
          items:
            $ref: '#/components/schemas/Runtime'
    Metadata:
      type: object
      properties:
        name:
          type: string
    Event:
      type: object
      properties:
        blockNumber:
          type: integer
          format: int64
        eventIndex:
          type: integer
          format: int16
        section:
          type: string
        method:
          type: string
        phase:
          type: string
        types:
          type: string
        data:
          type: string
        doc:
          type: string
        timestamp:
          type: string
          format: int64
    Events:
      type: object
      properties:
        total_event:
          type: integer
          format: int64
        at_page:
          type: integer
          format: int64
        total_page:
          type: integer
          format: int64
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Log:
      type: object
      properties:
        blockNumber:
          type: integer
          format: int64
        index:
          type: integer
          format: int16
        type:
          type: string
        engine:
          type: string
        logData:
          type: string
        timestamp:
          type: string
          format: int64
    Logs:
      type: object
      properties:
        total_logs:
          type: integer
          format: int64
        at_page:
          type: integer
          format: int64
        total_page:
          type: integer
          format: int64
        logs:
          type: array
          items:
            $ref: '#/components/schemas/Log'
    ValaidatorFeature:
      type: object
      properties:
        stashAddress: 
          type: string
        name:
          type: string
        timestamp:
          type: integer
          format: int64
    ValidatorStatus:
      type: object
      properties:
        activeEra:
          type: integer
          format: int64
        currentEra:
          type: integer
          format: int64
        activeValidatorCount:
          type: integer
          format: int64
        waitingValidatorCount:
          type: integer
          format: int64
        nominatorCount:
          type: integer
          format: int64
        minimumStake:
          type: integer
          format: int64
    Validator:
      type: object
      properties:
        blockHeight:
          type: integer
          format: int64
        activeEras:
          type: integer
          format: int32
        rank:
          type: integer
          format: int16
        active:
          type: boolean
        stashAddress:
          type: string
        controllerAddress:
          type: string
        name:
          type: string
        totalStake:
          type: integer
          format: int32
        otherStake:
          type: integer
          format: int32
        stakeHistory:
          type: string
        nominators:
          type: integer
          format: int8
        nominatorsRating:
          type: integer
          format: int8
        nominations:
          type: array
          items:
            $ref: '#/components/schemas/Nomination'
        clusterName:
          type: string
        clusterMembers:
          type: integer
          format: int8
        partOfCluster:
          type: boolean
        show_clusterMember:
          type: boolean
        identity:
          type: string
        hasSubIdentity:
          type: boolean
        verifiedIdentity:
          type: boolean
        identityRating:
          type: integer
          format: int8
        addressCreationCating:
          type: integer
          format: int8
        activeInGovernance:
          type: boolean
        councilBacking:
          type: boolean
        governanceRating:
          type: integer
          format: int8
        dominated:
          type: boolean
        commission:
          type: integer
          format: int32
        commissionRating:
          type: integer
          format: int8
        commissionHistory:
          type: string
        activeRating:
          type: integer
          format: int8
        eraPointsPercent:
          type: integer
          format: int32
        eraPointsRating:
          type: integer
          format: int8
        eraPointsHistory:
          type: string
        payoutRating:
          type: integer
          format: int8
        payoutHistory:
          type: string
        performance:
          type: integer
          format: int32
        performanceHistory:
          type: string
        relativePerformance:
          type: integer
          format: int32
        relativePerformanceHistory:
          type: integer
          format: int32
        slash_rating:
          type: integer
          format: int8
        slashed:
          type: boolean
        slashes:
          type: string
        totalRating:
          type: integer
          format: int8
        timestamp:
          type: integer
          format: int64
    Nomination:
      type: object
      properties:
        staking: 
          type: string
        amount:
          type: integer
          format: int32
    Validators:
      type: object
      properties:
        total_valalidaors:
          type: integer
          format: int64
        validators:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Modules:
      type: string
      enum:
        - authoritydiscovery
        - authorship
        - babe
        - bagslist
        - balances
        - bounties
        - configuration
        - council
        - democracy
        - dmp
        - electionprovidermultiphase
        - grandpa
        - historical
        - hrmp
        - identity
        - imonline
        - indices
        - initializer
        - multisig
        - parainherent
        - paras
        - parasdisputes
        - phragmenElection
        - preimage
        - proxy
        - recovery
        - registrar
        - scheduler
        - session
        - slots
        - staking
        - system
        - technicalCommittee
        - technicalMembership
        - timestamp
        - tips
        - treasury
        - ump
        - utility
        - vesting
        - xcmPallet
    Engins:
      type: string
      enum:
        - Consensus
        - PreRuntime
        - Seal
        - Other
